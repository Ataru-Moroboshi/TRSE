Unit Input;
var  
   c: byte;
   d: byte;
   i: integer;
   p: pointer;
   q: pointer;

/*
  Joystick bits

  0 = Up
  1 = Down
  2 = Left
  3 = Right
  4 = Fire 1
  5 = Fire 2
*/

const JOYUP: byte = 1;
const JOYDOWN: byte = 2;
const JOYLEFT: byte = 4;
const JOYRIGHT: byte = 8;
const JOYFIRE1: byte = 16;
const JOYFIRE2: byte = 32;

/*
TODO(ColinPitrat):
  BB0C KM_CHAR_RETURN   in: A=char (writeback max one char to keybuf)
  BB0F KM_SET_EXPAND    in: B=code, HL=ptr to new string, C=length
  BB12 KM_GET_EXPAND    in: A=code (0-1F,80-9F), L=index, out:A=char, cy,zf
  BB15 KM_EXP_BUF_RESET in: de=begin, hl=length of buffer, out: cy: 1=okay
  BB21 KM_GET_LOCKS     out: H=caps lock (caps), L=shift lock (ctrl+caps)
  BB24 KM_GET_JOYSTICK  out: H=joystick 0, L=joystick 1
  BB27 KM_SET_TRANSLATE in: A=keyno, B=char (normal)
  BB2A KM_GET_TRANSLATE in: A=keyno, out: A=char (normal)
  BB2D KM_SET_SHIFT     in: A=keyno, B=char (with shift)
  BB30 KM_GET_SHIFT     in: A=keyno, out: A=char (with shift)
  BB33 KM_SET_CTRL      in: A=keyno, B=char (with control)
  BB36 KM_GET_CTRL      in: A=keyno, out: A=char (with control)
  BB39 KM_SET_REPEAT    in: A=keyno, B=repeat flag (FFh=on)
  BB3C KM_GET_REPEAT    in: A=keyno, out: nz=repeat
  BB42 KM_GET_DELAY     out: H=1st delay, L=repeat delay
  BB45 KM_ARM_BREAK     in: de=procedure, c=ROM config
  BB48 KM_DISARM_BREAK  in: none
  BB4B KM_BREAK_EVENT
 */

// Resets the keyboard manager.
// If c = 0, do a partial reset (key manager, empty key buffer, ignore current keys/chars)
// If c != 0, do a full reset (same + turn off shift & caps lock, reset expansion and translation tables) 
procedure Reset(c: global byte);
begin
  if c = 0 then
    asm("
      call #bb03
    ")
  else
    asm("
      call #bb00
    ");
end;

// Waits for a key to be pressed and returns the corresponding char.
// See http://www.cpcwiki.eu/imgs/3/3e/S968se03.pdf for the difference with WaitKey.
function WaitChar():byte;
begin
  asm("
    call #bb06
    ld [Input_c], a
  ");
  WaitChar := c;
end;

// Reads the next char from the keyboard buffer if available.
// Returns 0 if no char was available and the byte pointed by p is not updated.
// Returns 1 if a char was available and the byte pointed by p contains the char read.
// See http://www.cpcwiki.eu/imgs/3/3e/S968se03.pdf for the difference with ReadKey.
function ReadChar(p: global pointer):byte;
begin
  asm("
    call #bb09
    jp nc, input_read_char_no_key
    ld hl, [Input_p]
    ld (hl), a
    ld a, 1
    ld [Input_c], a
    jp input_read_char_finished
  input_read_char_no_key:
    ld a, 0
    ld [Input_c], a
  input_read_char_finished:
  ");
  ReadChar := c;
end;

// Waits for a key to be pressed and returns it.
// See http://www.cpcwiki.eu/imgs/3/3e/S968se03.pdf for the difference with WaitChar.
function WaitKey():byte;
begin
  asm("
    call #bb18
    ld [Input_c], a
  ");
  WaitKey := c;
end;

// Reads the next key from the keyboard buffer if available.
// Returns 0 if no key was available and the byte pointed by p is not updated.
// Returns 1 if a key was available and the byte pointed by p contains the char read.
// See http://www.cpcwiki.eu/imgs/3/3e/S968se03.pdf for the difference with ReadKey.
function ReadKey(p: global pointer):byte;
begin
  asm("
    call #bb1b
    jp nc, input_read_key_no_key
    ld hl, [Input_p]
    ld (hl), a
    ld a, 1
    ld [Input_c], a
    jp input_read_key_finished
  input_read_key_no_key:
    ld a, 0
    ld [Input_c], a
  input_read_key_finished:
  ");
  ReadKey := c;
end;

// Tests whether a particular key is pressed.
// Returns 1 if the key is pressed, 0 otherwise.
// TODO(ColinPitrat): Provide info whether Shift & Control are pressed. This is stored in C in bits 5 and 7 resp.
function TestKey(c: global byte):byte;
begin
  asm("
    ld a, [Input_c]
    call #bb1e
    jp nz, input_test_key_pressed
    ld a, 0
    jp input_test_key_finished
  input_test_key_pressed:
    ld a, 1
  input_test_key_finished:
    ld [Input_d], a
  ");
  TestKey := d;
end;

// Sets the repeat delay for the keyboard.
// c is the delay before the first repeat.
// d is the delay between next repeats.
// The values are in 1/50th of second and range from 1 to 256 (0 = 256)
procedure SetRepeatDelay(c: global byte, d: global byte);
begin
  asm("
    ld a, [Input_c]
    ld h, a
    ld a, [Input_d]
    ld l, a
    call #bb3f
  ");
end;

procedure GetJoysticks(p: global pointer, q: global pointer);
begin
  asm("
    call #bb24
    ld de, [Input_p]
    ld (de), a
    ld de, [Input_q]
    ld a, l
    ld (de), a
  ");
end;

end.
