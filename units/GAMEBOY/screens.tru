unit Screens;
var
	p1,zp:pointer wram;
	dx,dy,flipx, flipy, w,h,adde,b,x,y,j,i,done,c,idx, attr, len, start:byte wram;
	screenOn : byte;
	
	const storage: address= $C900;

	spriteData, spriteIndices : ^byte;

/**
 This method turns the lcd ON and sets the screen data pointer to $9800. Windows are off, objects are on.
**/

procedure Set9800();
begin
	asm("
        ld	a,LCDCF_ON | LCDCF_BG9800 | LCDCF_OBJ8 | LCDCF_OBJON | LCDCF_WINOFF | LCDCF_BGON
        ld	[rLCDC],a			; enable lcd
	
	");
	screenOn:=1;
	
end;


/**
 Copies [ param 3 ] * 256 bytes of memory from source (param 1) to destination (param 2) during horizontal
 blanking. This is to ensure that the screen memory won't be corrupted. 
**/
procedure CopyBankHB(cp1, cp2 : pointer; cwi : byte);
begin
	for i:=0 to cwi offpage do
	begin
		waitforraster(0);
		memcpyonHBlank4(cp1,cp2,256);
/*		asm("
	ld b,$01
	ld a,[ Screens_cp1 ]
	add a,b
	ld [ Screens_cp1 ],a
	
	ld b,$01
	ld a,[ Screens_cp2 ]
	add a,b
	ld [ Screens_cp2 ],a


		");	*/	
		cp1:=cp1+256;
		cp2:=cp2+256;
	end;
end;

/**
Turns on the Gameboy Windows overlay
**/
procedure EnableWindow();
begin
	asm("
		ld a,[rLCDC]
        or	a, LCDCF_WINON | LCDCF_WIN9C00
        ld	[rLCDC],a
	
	");
//	screenOn:=1;
	
end;

/**
	Sets the screen location at $9c00
**/
procedure Set9C00();
begin
	asm("
        ld	a,LCDCF_ON | LCDCF_BG9C00 | LCDCF_OBJ8 | LCDCF_OBJON | LCDCF_WINOFF | LCDCF_BGON
        ld	[rLCDC],a			; enable lcd
	");
end;
/**
	Sets the screen location at $8000
**/
procedure Set8000();
begin
	asm("
        ld	a,LCDCF_ON | LCDCF_BG8000 | LCDCF_OBJ8 | LCDCF_OBJON | LCDCF_WINOFF | LCDCF_BGON
        ld	[rLCDC],a			; enable lcd
	
	");
end;
/**
Turns OFF the LCD screen. Use set9800 etc to restore. 
**/
procedure StopLCD() inline;
begin
	asm("
    ld a, [rLCDC]
    res 7, a            ; Reset bit 7 of LCDC
    ld [rLCDC], a
	");
	screenOn:=0;
end;


/**
Draws a horizontal line in screen ram (32*32) from position (hlx,hly) with height (hllen) and value (hlc). 
**/
procedure HLine(hlx, hly, hllen, hlc : byte) inline;
begin
	p1:=screen0;
	p1:=p1 + hly*32;
	p1:=p1+ hlx;
	for j:=0 to hlc do
	begin
		p1[0]:=hlc;
		p1:=p1+$20;
	end;
end;


/**
Draws a vertical line in screen ram (32*32) from position (hlx,hly) with width (vllen) and value (vlc). 
**/
procedure VLine(vlx, vly, vllen, vlc : byte) inline;
begin
	p1:=screen0;
	p1:=p1 + vly*32;
	p1:=p1+ vlx;
	fill(p1,vlc,vllen);
end;





/**
	Renders a screen data fragment at position (p+adde) of width w,h to position x,y on a 
	32x32 buffer. Not safe to use on screen ram directly.
**/
procedure RenderScreen(p:pointer;adde,b,x,y,w,h : global byte);
begin
//	p1:=screen0;
	p1:=screen0;
	p:=p+adde;
	p1:=p1+x;
	if (y<>0) then
		p1:=p1+y*32;

	for j:=0 to h do
	begin
		memcpy(p,p1,w);
		
		p1:=p1+32;			
		p:=p+w;
	end;
end;

procedure RenderOffScreen(ro_dst,ro_p:pointer;ro_adde,ro_b,ro_x,ro_y,ro_w,ro_h : byte);
begin
	p1:=ro_dst;
	ro_p:=ro_p+ro_adde;
	p1:=p1+ro_x;
	
	if (ro_y<>0) then
		p1:=p1+ro_y*32;

	for j:=0 to ro_h do
	begin
		memcpy(ro_p,p1,ro_w);
		
		p1:=p1+32;			
		ro_p:=ro_p+ro_w;
	end;
end;



procedure RenderScreenVB8(pr2:pointer;adde2,b2,x2,y2,w2,h2 : byte);
begin
	p1:=screen0;
	pr2:=pr2+adde2;
	p1:=p1+x2;
	if (y2<>0) then
		p1:=p1+y2*32;

	for j:=0 to h2 do
	begin
		memcpyonhblank(pr2,p1,w2);
		
		p1:=p1+32;			
		pr2:=pr2+w2;
	end;
end;

procedure PrintText(p1 :global  pointer;x,y,c : global byte ; text : pointer of byte);
begin
	done:=false;
	j:=0;
	p1:=p1+x;
	p1:=p1+y*32;
	while (done = false) offpage do
	begin
		i:=text[j];
		// Space $20 ignore
		if (i<>$20) then
		begin
			if (i<$3F) then
			begin
				i:=i+10;
			end
			else
			if (i>64) then
			begin
				i:=i-65+c;
			end;
			p1[j]:=i;

		end;
		j:=j+1;
		
		if (text[j]=0) then done:=true;		
	
	end;	
end; 


/**
	Fills 32*32 bytes of data at [clspos] with value [cls]. Safe to write to VRAM.
**/
procedure ClearScreen(clspos : pointer; cls:byte);
begin
	zp:=#storage;
	fill(zp,cls,64);
	for i:=0 to 16 do
	begin
		zp:=#storage;
		memcpyonhblank4(zp,clspos,64);
		clspos:=clspos+64;
	end;
end;

/**
	Fills [vlen] bytes of data at [pvr] with value [fcls]. Safe to write to VRAM.
**/
procedure FillVRAM(pvr:pointer;fcls, vlen:byte);
begin
	zp:=#storage;
	fill(zp, fcls, vlen);
	zp:=#storage;
	memcpyonhblank(zp,pvr,vlen);
end;


/**
	Clears the window (32x32 bytes) with value [clw].
**/
procedure ClearWindow(clw:byte);
begin
	p1:=$9C00;
	zp:=#storage;
	fill(zp,clw,64);
	for i:=0 to 16 do
	begin
		memcpyonhblank(zp,p1,64);
		p1:=p1+64;
	end;

end;
/**
Copies a 256-character (256*8*2 = $1000) bytes of data to the standard character
location at $9000 and $8800.
**/
procedure CopyFullCharset(cpfc:pointer);
begin
	p1:=cpfc;
	CopyBankHB(p1,$9000, 8);
	p1:=cpfc;
	p1:=p1+(256*8);
	CopyBankHB(p1,^$8800, 8);
end;


/**
Clears [param 1] out of 40 sprites by setting them to position 0.
**/
procedure ClearSprites(cs_n:byte);
begin
	p1:=$C000;
//	fill(^$C000,0,256);
	for i:=0 to cs_n do
	begin
		// Set x / y to 0
		p1[0]:=0;
		p1[1]:=0;
		p1:=p1+4;
	end;

end;
/**
Sets the default gameboy screen and palette. Also clears the screen and removes all sprites. 
**/
procedure InitDefaultScreen();
begin
	background_palette:=%10010011;
	object0_palette:=%10010011;
	scrollx:=0;
	scrolly:=0;

	ClearSprites(64);
	ClearScreen(screen0,0);

	// Set screen at $9800
	Set9800();
end;

/**
Clears the character set located at $8800-$9800
**/
procedure ClearVRAM();
begin
	fill(^$D000,0,$800);
	p1:=$8800;
	CopyBankHB(^$D000, $8800, 8);
	CopyBankHB(^$D000, $9000, 8);
end;

/**
	InitSpriteFromData will set up NxM sprite pointers (in sprite memory) pointing to data in the current
	sprite bank. <br>
	<br>
	spriteData: pointer to the sprite data location in sprite ram. 4 bytes per 8x8 sprite. 	<br>

	spriteIndices : table of lookup indices for each sprite	<br>

	start : the start index of the sprite	<br>

	len : number of 8x8 sprites 	<br>

	w : width of the 8x8 sprite blocks	<br>

	attr : the attribute of the sprite (flipx, flipy etc)	<br>
	<br>
	If you need speed, please use the internal InitSpriteFromData method, which is faster<br>


	example:<br>
<code>
	// 2x3 8x8-blocked sprite with width 2 
	Screens::InitSpriteFromData(#sprGirl, #sprites_index,pos,6 ,2, doFlip);

</code>


**/

procedure InitSpriteFromData(spriteData, spriteIndices : global ^byte, start, len, w, attr : global byte );
begin
	flipx := (attr & %00100000) = %00100000;	
	flipy := (attr & %01000000) = %01000000;	
	x:=0;
	y:=0;
	h := len/w;	
	for i:=0 to len do
	begin
		dx := x;
		dy := y;
		if (flipx) then dx := w - 1 - dx;
		if (flipy) then dy := h - 1 - dy;
		c := (dx + dy*w)<<2;
		spriteData[c+2] := spriteIndices[start];		
		spriteData[c+3] := attr;		
		
		start+=1;
		x+=1;
	 	if (x=w) then
		begin
			x := 0;
			y += 1;
		end;	
	end;
end;	


procedure SetSprite(spriteData: global ^byte; x,y,w,h : global byte);
begin
	for j:=0 to h do
	begin
		// Reset x position
		dx:=x;
		for i:=0 to w do
		begin
			// Set x/y vals
			spriteData[0] := y;
			spriteData[1] := dx;
			// Increase to next sprite 
			spriteData+=4;
			dx+=8;
		end;
		y+=8;
		
	end;
end;

end.
