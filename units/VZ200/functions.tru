Unit Functions;

var
  @donotremove i
  i : Integer;
  j : byte;
  h,l : byte;
  p : pointer;
  s : pointer;

/** 
  Gets a random integer number 0-65535
  **/
function GetRnd(i : global Integer):Integer;
begin
  asm("
    ld bc,#0000
    ld de,[Functions_i]
    call #09b4    ; Loads ACC with BCDE
    call #0a9d    ; Set flag to Integer
    call #14c9    ; RND routine. Using ACC, not A
    call #0a7f    ; CINT. Puts ACC into HL  
    ld a,h
    ld [Functions_h],a
    ld a,l
    ld [Functions_l],a
  ");
    GetRnd := 256*h+l;
end;

/** 
  Converts an Integer to a byte
  **/
function IntToByte(i: global Integer):byte;
begin
  asm("
    ld hl,[Functions_i]
    ld a,l
    ld [Functions_j],a
  ");
  IntToByte := j;
end;

/** 
  Converts a byte to an Integer
  **/
function ByteToInt(j: global byte):Integer;
begin
asm("
  ld h,#00
  ld a,[Functions_j]
  ld l,a
  ld [Functions_i],hl
");
  ByteToInt := i;
end;

function getRandFromArray(p: global pointer):byte;
begin
  asm("
    ld hl,[Functions_p]
    ld a,r
    ld b,#00
    ld c,a
    add hl,bc
    ld a,(hl)
    ld [Functions_i],a
  ");
  getRandFromArray := i;
end;

/**
  Converts an Integer number to a string
  **/
procedure IntegerToString(i : global Integer);
begin
  asm("
    ld bc,#0000
    ld de,[Functions_i]
    call #09b4      ; Loads ACC with BCDE
    call #0a9d      ; Set flag to Integer 
    ld a,#02
    ld (#78af),a   
    call #0fbd      ; Convert ACC to ASCII string 0-delim HL points to string  
    ld [Functions_s],hl
tstlp jp tstlp    
  ");
end;

/**
  Converts a Byte number to a string
  **/
procedure ByteToString(j : global byte);
begin
  asm("
    ld bc,#0000
    ld d,#00
    ld a,[Functions_j]
    ld e,a
    call #09b4      ; Loads ACC with BCDE
    call #0a9d      ; Set flag to Integer    
    call #0fbd      ; Convert ACC to ASCII string 0-delim HL points to string  
    inc hl
    ld [Functions_s],hl
  ");
end;

end.