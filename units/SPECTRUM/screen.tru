unit Screen;
var
	ytab : array[193] of integer=BuildTable("0x4000 + (i&0b00111000)*4 | (i&7 | (i&0b11000000)/8)*0x100 ");
	ytab_color : array[24] of integer=BuildTable("0x5800+i*32 ");
	/*@donotremove pixeltab
	@donotremove pixeltabInv
	
	pixeltab : array[8] of byte = BuildTable("1<<i");
	pixeltabInv : array[8] of byte = BuildTable("0xff^(1<<i)");
	*/
	@donotremove tabindex
	tabindex : array[] of byte = (
       0,8,16,24,32,40,48,56,1,9,17,25,33,41,49,57,
       2,10,18,26,34,42,50,58,3,11,19,27,35,43,51,59,
       4,12,20,28,36,44,52,60,5,13,21,29,37,45,53,61,
       6,14,22,30,38,46,54,62,7,15,23,31,39,47,55,63,

       64,72,80,88,96,104,112,120,65,73,81,89,97,105,113,121,
       66,74,82,90,98,106,114,122,67,75,83,91,99,107,115,123,
       68,76,84,92,100,108,116,124,69,77,85,93,101,109,117,125,
       70,78,86,94,102,110,118,126,71,79,87,95,103,111,119,127,

       128,136,144,152,160,168,176,184,129,137,145,153,161,169,177,185,
       130,138,146,154,162,170,178,186,131,139,147,155,163,171,179,187,
       132,140,148,156,164,172,180,188,133,141,149,157,165,173,181,189,
       134,142,150,158,166,174,182,190,135,143,151,159,167,175,183,191
	);
	@donotremove tabpow
	tabpow: array[] of byte = (128,64,32,16,8,4,2,1);
	i,j:byte;
	x,y : byte;
	zp:pointer;
	
procedure BorderColor(_a:byte);
begin
	asm("
		ld bc,#fe
;        ld a,7
        out (c),a

	");	
end;


procedure ClearScreen(x,y : global byte);
begin
	fill(#vram, x, $1800);
	fill(#cram, y, 768);
end;


procedure PutPixel(x,y : global byte);
begin
	/*
	zp:=ytab[y];
	zp += x>>3;
	i:=pixeltab[x&7];
	j:=pixeltabInv[x&7];
	asm("
		ld a,[Screen_i]
		ld b,a
		ld a,[Screen_j]
		ld c,a
		ld hl,[Screen_zp]
		ld a,(hl)
		and c
		or b
		ld (hl),a
	");	
	*/
	asm("
	ld      hl,Screen_tabpow
    ld      a,(Screen_x)
    and     7       ; x mod 8
    ld      b,0
    ld      c,a
    add     hl,bc
    ld      a,(hl)
    ld      e,a     ; e contains one bit set

    ld      hl,Screen_tabindex
    ld      a,(Screen_y)
    ld      b,0
    ld      c,a
    add     hl,bc
    ld      a,(hl)      ; table lookup

    ld      h,0
    ld      l,a
    add     hl,hl
    add     hl,hl
    add     hl,hl
    add     hl,hl
    add     hl,hl       ; x32 (16 bits)

    set     6,h         ; adds the screen start address (16384)

    ld      a,(Screen_x)
    srl     a
    srl     a
    srl     a           ; x/8.

    or      l
    ld      l,a         ; + x/8.

    ld      a,(hl)
    or      e           ; or = superposition mode.
    ld      (hl),a      ; set the pixel.	
	
		");
end;


procedure ClearDefaultIRQ(pos:pointer;intPos:pointer);
begin
		asm("
        ;Initializes IM2, gets rid of the system interrupt.
        di
        ld hl,[Screen_pos]	;HL points to the IM2 Lookup table.
        ld a,h
        ld i,a		;Set I= high(pos).
        im 2		;Switch to vectorized interrupts.
        ");
        for i:=0 to 256 do
		begin
			pos[0]:=lo(intPos);
			pos[1]:=hi(intPos);
			pos:=pos+2;
		end; 
		intPos[0]:=$fb;
		intPos[1]:=$c9;
		asm(" ei");
        /*
        inc a
        ex de,hl
        ld hl,[Screen_intPos]
Im2FillLut: 
		ld a,l
	    ld (de),a	;Fills the IM2 LUT with l.
        inc e		;All INT will jump to .
		ld a,h
	    ld (de),a	;Fills the IM2 LUT with h.
        inc e		;All INT will jump to #$7989.
        jr nz,Im2FillLut
        
        inc d
		ld a,l
        ld (de),a
        inc e		;All INT will jump to .
		ld a,h
	    ld (de),a	;Fills the IM2 LUT with h.
	
;        ld sp,$
		");
//		pos[$181]:=$fb; // ei
//		pos[$182]:=$c9; // ret
*/
	end;


end.
