unit txt;
@use "screen"
@use "format"
var
	i,y,p:byte;
	str:string;
	@donotremove str
	CH:byte;
	@donotremove CH
	@donotremove i
	@donotremove y
	@donotremove p
	LATEST_SCANCODE: byte;
	@donotremove LATEST_SCANCODE
	
	temp_address_p: pointer of byte;
	@donotremove temp_address_p
	
	Active_Page_Number:integer;
	
	ytab : array[25] of integer=(
		0,0,0,0,0,0,
		0,0,0,0,0,0,
		0,0,0,0,0,0,
		0,0,0,0,0,0);
	screen_memory: pointer;
	max_digits,next_digit: integer;
	temp_num_p: pointer;
	temp_num: integer;
	temp_i: integer=0;
	this_bbc: byte=0;
	
	in_str: pointer;
	@donotremove in_str
	
	CRLF: byte;
	@donotremove CRLF
	
	ch_col,ch_row:byte;
	@donotremove ch_col
	@donotremove ch_row
	
	
	_match:byte;
	@donotremove _match
	
	o_cx:byte;
	o_cy:byte;
	
	user_input: pointer;
	user_str: string = ("                                   ");
	@donotremove user_input
	@donotremove user_str
	
	str1,str2: pointer;
	@donotremove str1
	@donotremove str2
	
	// PC cursors		        
	const CUR_U: byte = $71;
	const CUR_D: byte = $61;
	const CUR_L: byte = $6F;
	const CUR_R: byte = $70;


	/**
	
	Put a character at current cursor position
	
	**/
	procedure put_ch(CH:global byte);
	begin

		asm
			
			ld a, [txt_CH]
			call $10
		end;


	end;

	/**
	
	Helper to set up screen pointers etc
	
	**/
	procedure DefineScreen();
    begin

	    


    end;
    
    

    /**

	 Escape sequence
    
    **/
    procedure esc();
    begin


	    put_ch($1B);   
	    put_ch($5B);   

    end;


    


	/**
	
	Place the cursor at X, Y screen position
	
	**/
	procedure move_to(_text_x: byte, _text_y: byte);
   begin

		asm
			
			ld a,22
			call $0010
			ld a,[txt__text_y]
			call $0010
			ld a,[txt__text_x]						
			call $0010
			
			
		end;

	    
   end;
    
    
   /**

	Place the cursor at 0,0 top left of screen
	
	**/
	procedure cursor_home();
	begin

		move_to(0,0);

   end;
	
	/**
	
	Wait for vertical blank (not yet implemented)
	
	**/
	procedure wait_vsync();
    begin

    end;

	/**
	
	Set the text colour (not available on all platforms)	
	
	**/
	procedure text_colour(_chosen_text_colour: byte);
    begin
	    
    end;	
	
	
	
	function read_keyboard():byte;
	var
				temp_k:byte;
				@donotremove tmp_k
	begin
		temp_k:=0;
		asm
		
		Read_Keyboard:        		
						ld hl, $5c08
						ld a,(hl)
					 	ld [txt_temp_k],a                                   
	
		end;
	    poke(^$5c08,0,0);
	    read_keyboard:=temp_k;
	end;

	/**

	Get a character input from the keyboard	
	
	**/
	function get_key():byte;
	var
			_k,tmp:byte;
    begin
	    
		_k:=read_keyboard(); 	
		get_key:=_k;
	    
    end;
    
    
	/**

	Get a character input from the keyboard	
	
	**/
	function get_scancode():byte;
    begin

	    
	    get_scancode:=CH;
    end;
    
        
    
	/**
	
	Wait for a key press	
	
	**/
	procedure wait_key();
    begin
	    
	    while(get_key()=0) do 
			begin
			end;
	    
    end;
	/**

	Clear the keyboard buffer	
	
	**/
	procedure clear_buffer();
    begin
	    
    end;


	/**
    
    Get current cursor position to o_cx,o_cy
	
	**/
 	procedure get_cursor_position();
    begin

	end;    

	/**
	
	Put a character at a X, Y screen coordinate
	
	**/
    procedure put_char_at(_atx,_aty,_atchar:byte);
 	    
    begin
	    
		move_to(_atx,_aty);
		put_ch(_atchar);
	    
    end;

	/**

	Output a string at the current cursor location.
	Set Carriage Return on/off	
	
	**/
	procedure print_string(the_str: pointer, out_CRLF: byte);
	var
		
    begin
		while(the_str^<>0) do
		begin
			if(the_str^>=$20) then put_ch(the_str^);
			the_str:=the_str+1;
		end;
	    
	    if(out_CRLF=true) then 
	    begin
		    put_ch(13);
	    end;
	    
    
    end;



	/**
	
	Return the character at chosen screen position
	
	**/
    function get_char_at(ch_col,ch_row: global byte):byte;  
    begin
	    
	    
	    		asm
; supply params (spectrum has x and y switched confusingly)
					
					ld a,[txt_ch_col]			
					ld l,a
					ld a,[txt_ch_row]
					ld h,a

			; get pointer
				   rrca
				   rrca
				   rrca
				   and $e0
				   or l
				   ld l,a
				   
				   ld a,h
				   and $18
				   or $40
			   ld h,a   
	

asm_zx_screenstr:
   ; h = char Y 0..23
   ; l = char X 0..31
   ;
   ; exit : hl = ascii char code if match, else 0 and carry set   
   ; hl = screen address
   
   ld c,96                     ; number of chars to match against
   ld de,($5C36)               ; use CHARS system variable to locate character set bitmap
   inc d

charloop:

   ld b,8                      ; match 8 pixel rows
   push hl

mloop:

   ld a,(de)
   xor (hl)
   jr z, cont1                 ; jump if bit patterns match
   inc a
   jr nz, nomatch              ; jump if bit patterns are not inverses

cont1:

   inc de
   inc h
   djnz mloop
   
match:

   pop hl
   
   ld a,128
   sub c

   ld l,a                      ; hl = ascii char code
   ld h,b
   ret
   
nomatch:

   ld a,b			;Remaining rows in font left
   add a,e
   ld e,a
   jp nc, cont2
   inc d

cont2:

   pop hl
   dec c
   jp nz, charloop
   
   ld l,c
   ld h,c                      ; return with 0 to indicate no match
   scf
	ld [txt_CH],hl
	
	
	
end;
	    
	    // return the character
	    get_char_at:=CH;

    end;    

	procedure push_registers();
	begin
		asm
			
		; preserve registers
					push hl
					push bc
					push de
					push af
	
		end;	
	end;

	procedure pop_registers();
	begin
		asm
		; restore registers	
					pop af
					pop de
					pop bc
					pop hl
			
		end;

	end;
	
	procedure beep();
	begin
		
		asm
			

			
BEL_LENGHT:
        ld      b,70
        ld      c,254
BEL_loop:
        dec     h
        jr      nz,BEL_jump
        xor     16
        out     (c),a
BEL_FREQ_1:
        ld      h,165
BEL_jump:
        dec     l
        jr      nz,BEL_loop
        xor     16
        out     (c),a
BEL_FR_2:
        ld      l,180
        djnz    BEL_loop

		end;
		
		
	end;


	/**
	
	Get screen page
	
	**/    
    procedure get_page();
    begin

	    
    end;
    
	/**
	
	Hide flashing cursor
	
	**/
	procedure cursor_off();
	var

    begin
	    

	    
    end;

	/**
	
	Show flashing cursor
	
	**/
	procedure cursor_on();
	var

    begin
	    

	    
    end;


	/**
	
	Compare two strings for equality
	
	**/

	function str_compare(str1: global pointer,str2: global pointer):byte;
	begin
		
		_match:=false;
		
		i:=str1^;
		p:=str2^;		
		

		while(i>=32) do
		begin

/*
			put_ch(i);
			put_ch($3A);
			put_ch(p);
			put_ch(32);
*/
					
			if(i=p) then 
			begin
				_match:=true;
			end
			else
			begin
				_match:=false;
			end;
			
			str1:=str1+1;
			str2:=str2+1;
			i:=str1^;
			p:=str2^;		
		end;

		str_compare:=_match;
	end;



	
	function str_len(in_str: global pointer):byte;
	begin
		
		i:=0;
		
		// get the Str_Len by counting until char is 0
		while(in_str[i]<>0) do
		begin 
			i:=i+1;
		end;
		
		// Return
		str_len:=i;
		
	end;
	
	// print X spaces
	procedure print_space(max_digits: global integer);
	begin
		
		i:=0;
		for i:=0 to max_digits do
		begin
			put_ch(32);
		end;
		
	end;
	
	/**

	Output a string at the current cursor location but centered.
	Set Carriage Return on/off	
	Set the screen width
	Set reverse on/off
	
	**/
	procedure print_string_centered(in_str: global pointer, CRLF: global byte, _sc_w: byte);
	begin
		
		i:=0;
		max_digits:=0;
		
		// Get the length of the string
		i:=str_len(in_str);

		// padding should be half of width minus string length
		max_digits:=(_sc_w-i)/2;
			
		// Is it worth padding?
		if(max_digits>0 and i < 40) then
		begin	

			// Add the padding
			print_space(max_digits);
			
			// print the string
			print_string(in_str, CRLF);	

		end
		else
		begin
			// print the string
			print_string(in_str, CRLF);	
		end;
		

		
	end;

procedure crlf();
begin
	
	//txt::put_ch(10);
	txt::put_ch(13);
	
end;


/**

String input

**/
	
function get_string():integer;
begin

	i:=0;
	user_input:=#user_str;
	
	while (i<>13) do
	begin
		
		i:=get_key();
		
		if (i=$0C) then
		begin
			
			put_ch(32);
			put_ch($08);
			put_ch($08);
	
			user_input^:=0;
			user_input:=user_input-1;

		end
		else
		begin
			
			if(i>0 and i<>13) then
			begin
				user_input^:=i;
				put_ch(user_input^);
	
				user_input:=user_input+1;
				user_input^:=0;			

			end;
		end;
		
		// "Cursor"
		put_ch(95);	
		put_ch($08);	

	end;
	put_ch(32);
	put_ch(13);

	user_input:=#user_str;
	get_string:=user_input;

end;



	/**
	
	Output a string representation of a decimal number at current cursor position
	Set if you want carriage return true/false
	
	**/
	procedure print_dec(_in_n:integer, _add_cr:byte);
	var
		convert_string:string="";
	begin
		convert_string:="";
		temp_num_p:=#convert_string;
		Format::Itos(_in_n,temp_num_p);
		print_string(temp_num_p,_add_cr);	
		
	end;  

   
   
 
	
	
	/**
	
	Get numeric input from keyboard
	
	**/
	function get_dec():integer;
	var
		total:integer=0;
		prev:integer;
	begin
		total:=0;
		prev:=0;
		i:=get_key();

		while (i<>13) do
		begin
			if(i>0) then
			begin	

					if (i=$0C) then
					begin
						put_ch(32);
						put_ch($08);
						put_ch($08);
						total:=(total/10)-prev;

					end
					else
					begin
						put_ch(i);
						prev:=i-48;
						total:=(total*10)+prev;
					end;
		

			end;
			put_ch(95);
			put_ch($08);
			i:=get_key();
		end;
		put_ch(32);
		put_ch(13);
		get_dec:=total;	
	end;



	/**
	
	Output a string representation of a decimal number at chosen position
	
	**/
	procedure put_dec_at(_natx,_naty,_nat:byte);
	begin

		move_to(_natx,_naty);		
		print_dec(_nat, false);
		
	end;
		
   
	/**
	
	Clear screen and initialise pointers 
	Required for move_to etc
		
	**/
  	procedure cls();
    begin
		asm
			call $0DAF 
		end;
		 cursor_home();
	    DefineScreen();
    end;


end.