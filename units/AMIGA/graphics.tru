unit Graphics;
var
	pa,pb : pointer of integer;
	bpl,j,i : integer;
	const height: integer = 200;
	hx, hy, hl,hc:integer;
	@donotremove bytefill1
	@donotremove bytefill2
	bytefill1 : array[8] of byte =(%11111111,%01111111,%00111111,%00011111,%00001111,%00000111,%00000011,%00000001);
	bytefill2 : array[8] of byte =(%00000000,%10000000,%11000000,%11100000,%11110000,%11111000,%11111100,%11111110);
	
 /*
	Sets up the copper list to point to the screen 
*/
procedure SetupDefaultScreen(pa:global pointer of integer; bpl : global integer);
begin
	j:=$1000*bpl | $200;
	poke16(#copper_resolution, 0 , j); // $4000  = bitplanes, $200 = colours
	// Set palette at copper palette location, 16 colors
	// Setup image copper list (4 bitplanes, 40*40 modulo 120
	if (bpl=5) then
	begin
		SetCopperList32(pa, #copper_bitplane0);pa:=pa+40;
		SetCopperList32(pa, #copper_bitplane1);pa:=pa+40;
		SetCopperList32(pa, #copper_bitplane2);pa:=pa+40;
		SetCopperList32(pa, #copper_bitplane3);pa:=pa+40;
		SetCopperList32(pa, #copper_bitplane4);
		poke16(#copper_mod_even,0,160);
		poke16(#copper_mod_odd,0,160);
	end;
	if (bpl=4) then
	begin
		SetCopperList32(pa, #copper_bitplane0);pa:=pa+40;
		SetCopperList32(pa, #copper_bitplane1);pa:=pa+40;
		SetCopperList32(pa, #copper_bitplane2);pa:=pa+40;
		SetCopperList32(pa, #copper_bitplane3);
		poke16(#copper_mod_even,0,120);
		poke16(#copper_mod_odd,0,120);
	end;
	if (bpl=3) then
	begin
		SetCopperList32(pa, #copper_bitplane0);pa:=pa+40;
		SetCopperList32(pa, #copper_bitplane1);pa:=pa+40;
		SetCopperList32(pa, #copper_bitplane2);pa:=pa+40;
		poke16(#copper_mod_even,0,80);
		poke16(#copper_mod_odd,0,80);
	end;
	if (bpl=2) then
	begin
		SetCopperList32(pa, #copper_bitplane0);pa:=pa+40;
		SetCopperList32(pa, #copper_bitplane1);pa:=pa+40;
		poke16(#copper_mod_even,0,40);
		poke16(#copper_mod_odd,0,40);
	end;
	if (bpl=1) then
	begin
		SetCopperList32(pa, #copper_bitplane0);
		poke16(#copper_mod_even,0,0);
		poke16(#copper_mod_odd,0,0);
	end;
end;


procedure SetupNonInterlacedScreen(pa:global pointer of integer; bpl : global integer);
begin
	j:=$1000*bpl | $200;
	poke16(#copper_resolution, 0 , j); // $4000  = bitplanes, $200 = colours
	poke16(#copper_mod_even,0,0);
	poke16(#copper_mod_odd,0,0);
	// Set palette at copper palette location, 16 colors
	// Setup image copper list (4 bitplanes, 40*40 modulo 120
	if (bpl=5) then
	begin
		SetCopperList32(pa, #copper_bitplane0);pa:=pa+40*256;
		SetCopperList32(pa, #copper_bitplane1);pa:=pa+40*256;
		SetCopperList32(pa, #copper_bitplane2);pa:=pa+40*256;
		SetCopperList32(pa, #copper_bitplane3);pa:=pa+40*256;
		SetCopperList32(pa, #copper_bitplane4);
	end;
	if (bpl=4) then
	begin
		SetCopperList32(pa, #copper_bitplane0);pa:=pa+40*256;
		SetCopperList32(pa, #copper_bitplane1);pa:=pa+40*256;
		SetCopperList32(pa, #copper_bitplane2);pa:=pa+40*256;
		SetCopperList32(pa, #copper_bitplane3);
	end;
	if (bpl=3) then
	begin
		SetCopperList32(pa, #copper_bitplane0);pa:=pa+40*256;
		SetCopperList32(pa, #copper_bitplane1);pa:=pa+40*256;
		SetCopperList32(pa, #copper_bitplane2);
	end;
	if (bpl=2) then
	begin
		SetCopperList32(pa, #copper_bitplane0);
		pa:=pa+(40*256);
		
		SetCopperList32(pa, #copper_bitplane1);
	end;
	if (bpl=1) then
	begin
		SetCopperList32(pa, #copper_bitplane0);
	end;
end;


procedure HlineI(hx, hy, hl:global integer;pa:global pointer);
begin
	asm("
		move.l Graphics_pa, a0
		move.l #Graphics_bytefill1,a1
		move.l #Graphics_bytefill2,a2
		moveq #0,d0
		move.w Graphics_hy, d0
		mulu.w #40, d0
		add.l d0, a0
		
		move.w Graphics_hx,d0
		move.w d0,d1
		and #7,d1
		add d1,a1
		
		move.w Graphics_hx,d1
		add.w Graphics_hl,d1
		and #7,d1
		add d1,a2


		
		lsr #3,d0
;		and #$FFFE, d0
		add.w d0,a0
		
		move.b (a1),(a0)+
		

		move.w Graphics_hl,d3
		lsr #3,d3
		sub #1,d1
		move.w #$FF, d0 
hline_i : 
		move.b d0,(a0)+
		dbf d3,hline_i
		 
		move.b (a2),(a0)+

		


	");		

end;



/*
procedure CopySingleBitplaneData(pa,pb : global ^integer; bpl, j : global integer);
begin
	asm("
		move.l Graphics_pa,a0	 ; src
		move.l Graphics_pb,a1	 ; dst
		move.w j,d5 ; 	count
		move.q #0,d4
		move.w #40,d4 ; 	bpl
		mul.w j,d4
		sub.w #40,d4 ; d4 contains bitplane add 
csb_loop:
		move.l #10,d3
csb_inner:
		move.l (a0)+,(a1)+
		dbf d3,csb_inner
		add.l d4,a1 ; Add bitplane offset
		
	");	

end;
*/
end.
