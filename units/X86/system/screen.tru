unit Screen;
@use "system/memory"
var
	i,j,k,noBuffers,x,y,w,h : integer;
	fp : pointer;
	tp : pointer of byte;
	color,red,green,blue : byte;
	const VGA : integer = $A000;
	const CGA : integer = $B800;
	buffer1, buffer2, buffer3, buffer4, buffer5 : pointer;
	@donotremove source	
	@donotremove dest
	source,dest:pointer of integer;
	ytab_cga : array[200] of integer = buildtable("Math.floor(i/2)*80 + 8192*((i)%2)");

	CGA_cols : array[4] of byte=(cga_color0, cga_color1, cga_color2, cga_color3);
	port:integer;
	val, reg:byte;
	
	zp:pointer;
	
	const CRTCa : integer = $3D8;/* 6845 mode control register */
	const CRTCb : integer = $3D4; /* 6845 index register */
	const STATUS_REGISTER : integer = $3DA; /* Input Status Register */


procedure SetBGColor(_bx: byte);
begin
	asm("
		mov ah,0bh
		mov bh,0
		int 10h
	");
end;


procedure InitVGABuffers(noBuffers:global integer);
begin
	if (noBuffers>0) then
		buffer1 := Memory::GetBlockMem($FFF);
	if (noBuffers>1) then
		buffer2 := Memory::GetBlockMem($FFF);
	if (noBuffers>2) then
		buffer3 := Memory::GetBlockMem($FFF);
	if (noBuffers>3) then
		buffer4 := Memory::GetBlockMem($FFF);
	if (noBuffers>4) then
		buffer5 := Memory::GetBlockMem($FFF);
end;

procedure InitCGABuffers(noBuffers:global integer);
begin
/*	if (noBuffers>0) then
		buffer1 := Memory::GetBlockMem($3E8);
	if (noBuffers>1) then
		buffer2 := Memory::GetBlockMem($3E8);
	if (noBuffers>2) then
		buffer3 := Memory::GetBlockMem($3E8);
	if (noBuffers>3) then
		buffer4 := Memory::GetBlockMem($3E8);
	if (noBuffers>4) then
		buffer5 := Memory::GetBlockMem($3E8);*/
//	buffer1:=Memory::GetBlockMem(1000*noBuffers);
	buffer1:=ptr($2000,0);
	buffer2:=buffer1+16000;
	buffer3:=buffer2+16000;
	buffer4:=buffer3+16000;
	buffer5:=buffer4+16000;
end;

procedure ReleaseCGABuffers();
begin
	Memory::Release(buffer1);
end;


procedure InitVGABuffersNo21(noBuffers:global integer);
begin
	if (noBuffers>0) then
		buffer1 := ptr($2000,0);
	if (noBuffers>1) then
		buffer2 := ptr($3000,0);
	if (noBuffers>2) then
		buffer3 := ptr($4000,0);
	if (noBuffers>3) then
		buffer4 := ptr($5000,0);
	if (noBuffers>4) then
		buffer5 := ptr($6000,0);
end;

 procedure SetColor(color,red,green,blue:global byte);
 begin
  asm
    Cli
    mov dx,$3c8
    mov al,[Screen_color]
    out dx,al
    inc dx
    mov al,[Screen_red]
    out dx,al
    mov al,[Screen_green]
    out dx,al
    mov al,[Screen_blue]
    out dx,al
    Sti
   end;
 
end;


procedure SetPalette(tp:global pointer);
begin
	j:=0;
	for i:=0 to $100 do
	begin
		SetColor(i, tp[j], tp[j+1], tp[j+2]);
		j+=3;
	end;

end;



	

procedure CopyVGABuffer32bit(source,dest:global pointer of integer);
begin
  asm
  	cld
  	push ds
    les di,[Screen_dest]
    lds si,[Screen_source]
    mov ecx, 16000
    rep movsd
    pop ds
  end;
end;


procedure ClearBuffer32bit(dest:global pointer of integer;_ax:integer);
begin
  asm
    les di,[Screen_dest]
    mov     cx, 16000
    rep stosD
  end;
end;

procedure CopyVGABuffer16bit(source,dest:global pointer of integer);
begin
  asm
    push    ds
    les di,[Screen_dest]
    lds si,[Screen_source]
    
    mov     cx, 32000
    Rep MovsW
    pop     ds
  end;
end;


/**

 Sets the graphics mode. 13 is VGA 320x200.
**/
procedure SetMode(i : global integer);
begin
	asm("
		mov ax,[Screen_i]
		int $10
	");
end;

procedure PrintChar(ch : byte);
begin
	asm
		mov	al,[Screen_ch]
		mov	ah,0x0E
		int	10h
	
	end;
end;


procedure Print(zp:global pointer);
begin
	while (zp^<>0) do
	begin
		PrintChar(zp^);
		zp+=1;
	end;
end;

procedure NewLine();
begin
	PrintChar(10);
	PrintChar(13);
end;



procedure PrintAx();
begin
asm
	push ds
	pusha
	mov bx,$192
	mov ds,bx
printAx:		push	cx
			mov	cx,4
.printDigit:		
			rol	ax,4
			push	ax
			movzx	eax,al
			and	al,0xf
			mov	al,[eax+.higits]
			mov	ah,0x0E
			int	10h
			pop	ax
			loop	.printDigit
			pop	cx
			

			popa
			pop ds
			ret
.higits:		db	"0","1","2","3","4","5","6","7"
			db	"8","9","a","b","c","d","e","f"

end;
end;


procedure PrintInt(i:global integer);
begin
	asm
		mov ax,[Screen_i]
	end;
	PrintAx();
	
end;


	
procedure write_crtc(port:global integer; reg, val:global byte);
begin
     outportb(port, reg);
     outportb(port+1,val);
end;


procedure DrawBoxCGA(zp:global pointer, x,y,w,h,i : global integer);
begin
	zp+=ytab_cga[y] + x;
	for j:=0 to h do
	begin
		fillw(zp,i,w);
		zp+=80;
	
	end;
end;

end.