unit BeePlay;
@use "system/screen"
@use "system/tables"
var
	ptrOrder, ptrPattern, zp : pointer of byte;
	noChannels,note,octave,oct,o3 : byte;
	octShift,o4: byte = 2;
	@donotremove o3
	@donotremove o4
	i,noRows,val,distort,v2,j : integer;
	curOrder, noOrder, curRow, speed, counter,k : integer;


	decayLength : array[] of integer=(2,2,2,2,2,2,2,2);
	curNotes : array[] of integer=(0,0,0,0,0,0,0,0);
	curDistort : array[] of integer=(0,0,0,0,0,0,0,0);
	curDecay : array[] of integer=(0,0,0,0,0,0,0,0);



	curN : integer = 0;

	@donotremove noteTable
	noteTable : array[] of integer = 
	(
 	$8e88,$8683,$7ef6,$77d8,
	$7120,$6ac7,$64c6,$5f1e,
	$59c9,$54be,$4ffc,$4b7d
	);
	

	
	pow2 : array[] of integer = (1,2,4,8,16,32,64,128,256,512);



procedure Beep( bi : integer );
begin
	asm("

    mov     al, 182         ; Prepare the speaker for the
    out     43h, al         ;  note.
    mov ax,[BeePlay_bi]
                        ;  for middle C.
    out     042h, al         ; Output low byte.
    mov     al, ah          ; Output high byte.
    out     042h, al
	in      al, 61h         
    or      al, 00000011b   ; Set bits 1 and 0.
    out     61h, al         ; Send new value.
	");	
end; 

procedure Stop( );
begin
	asm("

    in      al, 61h         ; Turn off note (get value from
                            ;  port 61h).
    and     al, 11111100b   ; Reset bits 1 and 0.
    out     61h, al         ; Send new value.	
");
end; 


procedure Initialize( zp : global pointer );
begin
	noChannels := zp[0];
	noRows := zp[1];
	asm mov [BeePlay_noRows+1], byte 0 end;
	noOrder := zp[2];
	noOrder *=noChannels;
	zp:=zp+ptr(0,5);
	ptrPattern := zp+noOrder;
	
	
	fill(#decayLength,3,noChannels);
	
	speed := 3;
	counter :=0;
	ptrOrder := zp;
	curOrder := 0;
	curRow := 0;
	curOrder := 0;
	init_playnote();

end;


procedure Play();
begin
	// Get note of current channel
	i:=curNotes[curN];
	if (curDecay[curN]<>0) then
		curDecay[curN]-=1
	else
		i:=0;
	

	curN:=curN+1;
	
	if (curN = noChannels) then
		curN := 0;

	if (i=255 or i=0) then
	begin
		v2:=true; // prepare to stop
		for j:=0 to noChannels do
		begin
			if (curDecay[j]<>0) then
				v2:=false;
		end;
			
		if (v2) then
			Stop();
			
		return;
	end;


	// Play note
	//i:=curRow;

	// Calculate octave		
	oct := i/12;
	i:=mod(i,12);
	// Look up note
	val := noteTable[i];
	
	asm(";bug, fix, byte lookup in array");
	oct:=oct+octShift;
	val:=val/pow2[oct];
	
	Beep(val);

		

end;

procedure Update();
begin
	// Advance counter
	counter:=counter+1;
	if (counter<speed) then
		return;
		
	counter := 0;
	
	// Calculate new notes for each channel
/*	
	Screen::Print("  ROW ");
	Screen::PrintInt(curRow);
	Screen::Print(" - ");
*/
	
	for i:=0 to noChannels do
	begin
		// Get current order
		j := ptrOrder[curOrder+i];
		// Get pattern
		zp := ptrPattern + j*noRows;
		// Get data from row
		j := zp[curRow];
		// Do we have a note?
//		curNotes[i] := 0;
//		curDecay[i] := 0;
		if (j&$80 <>0) then
		begin
			j:= j &$7F; // Semitone
//			octave := j/12;
			if (j<>$7f) then
			begin
				val:=j;
				asm mov [BeePlay_val+1], byte 0 end; 
				curNotes[i] := val;
				
				curDecay[i] := decayLength[i];
			end;		
		
		end;
				
	end;
//	Screen::NewLine();
	
	curRow:=curRow+1;

	
	if (curRow=noRows) then
	begin
		curRow:=0;
		curOrder:=curOrder + noChannels;
		if (curOrder = noOrder) then
		begin
			curOrder:=0;//Reset to start of song
		end;
		
	end;	

end;


end.