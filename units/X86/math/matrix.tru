unit Matrix;
@use "tables"
var

	type mat3 = array[12] of integer;
	type mat2 = array[4] of integer;
	type matp = pointer of integer;

	temp : mat3;	
	i,j,k,v,angle : integer;
	c, s : integer;
	

procedure MatMul3( a,b : matp );
begin
	for j:=0 to 4 do
	begin
		k:=0;
		for i:=0 to 4 do
		begin
			v:=a[k+0] * b[0+j];
			v+=a[k+1] * b[4+j];
			v+=a[k+2] * b[8+j];
			temp[k+j] := v;
             k:=k+4;
        end;
    end;

	memcpy32(#temp,a,6);
			
end;

procedure Normalize3(a : global matp);
begin
	asm("
		mov cx,12
		les di,[Matrix_a]
norm:
		mov ax,[es:di]
		xchg al,ah
		mov ah,0
		stosw
		loop norm			
	");
end;


procedure Identity(m:matp);
begin
	k:=0;
	m[k] := 1; k+=1; m[k] := 0;k+=1; m[k] := 0;k+=1; m[k] := 0;k+=1;
	m[k] := 0; k+=1; m[k] := 1;k+=1; m[k] := 0;k+=1; m[k] := 0;k+=1;
	m[k] := 0; k+=1; m[k] := 0;k+=1; m[k] := 1;k+=1; m[k] := 0;k+=1;
	m[k] := 0; k+=1; m[k] := 0;k+=1; m[k] := 0;k+=1; m[k] := 1;k+=1;
end;

/*
procedure mattranslate(var mm:matrix;x,y,z:double);
begin
	mm[0][0] := 1; mm[0][1] := 0; mm[0][2] := 0; mm[0][3] := 0;
	mm[1][0] := 0; mm[1][1] := 1; mm[1][2] := 0; mm[1][3] := 0;
	mm[2][0] := 0; mm[2][1] := 0; mm[2][2] := 1; mm[2][3] := 0;
	mm[3][0] := x; mm[3][1] := y; mm[3][2] := z; mm[3][3] := 1;
end;
*/


procedure RotateX(m:global matp;angle:global integer);
begin
	c := Tables::sine256[angle&255];
	s := Tables::sine256[(angle+64)&255];
	
	k:=0;
	m[k] := 1; k+=1; m[k] := 0;k+=1; m[k] := 0;k+=1; m[k] := 0;k+=1;
	m[k] := 0; k+=1; m[k] := c;k+=1; m[k] := s;k+=1; m[k] := 0;k+=1;
	m[k] := 0; k+=1; m[k] := 0-s;k+=1; m[k] := c;k+=1; m[k] := 0;k+=1;
	m[k] := 0; k+=1; m[k] := 0;k+=1; m[k] := 0;k+=1; m[k] := 1;k+=1;
end;
/*

procedure matrotatey(var m:matrix;angle : double);
var
	c, s:double;
begin
	c := cos(angle);
	s := sin(angle);
	m[0][0] := c; m[0][1] := 0; m[0][2] := -s; m[0][3] := 0;
	m[1][0] := 0; m[1][1] := 1; m[1][2] := 0;  m[1][3] := 0;
	m[2][0] := s; m[2][1] := 0; m[2][2] := c;  m[2][3] := 0;
	m[3][0] := 0; m[3][1] := 0; m[3][2] := 0;  m[3][3] := 1;
end;

procedure matrotatez(var m:matrix;angle:double);
var
	c, s:double;
begin
	c := cos(angle);
	s := sin(angle);
	m[0][0] := c;  m[0][1] := s; m[0][2] := 0; m[0][3] := 0;
	m[1][0] := -s; m[1][1] := c; m[1][2] := 0; m[1][3] := 0;
	m[2][0] := 0;  m[2][1] := 0; m[2][2] := 1; m[2][3] := 0;
	m[3][0] := 0;  m[3][1] := 0; m[3][2] := 0; m[3][3] := 1;
end;
*/

end.
