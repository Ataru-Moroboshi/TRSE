unit AdvancedMath;
var
procedure Advanced01();
begin
	Vars::v1:=10;
	Vars::p1:=$0400 + Vars::v1;
	Vars::text := "01:"; if Vars::p1=$040A then Common::PASS() else Common::FAIL();
end;

procedure Advanced02();
begin
	Vars::p1:=$0400 + $50;
	Vars::text := "02:"; if Vars::p1=$0450 then Common::PASS() else Common::FAIL();
end;

procedure Advanced03();
begin
	Vars::v1:=100;
	Vars::p2:=$100;
	Vars::p1:=$0400 + Vars::v1*$20+Vars::p2;
	Vars::text := "03:"; if Vars::p1=$1180 then Common::PASS() else Common::FAIL();
end;

procedure Advanced04();
begin
	Vars::p2:=$4000;
	Vars::v1:=1;
	Vars::p2[Vars::v1]:=2;
	Vars::p1:=$0400;

	Vars::p1:=Vars::p1 + Vars::p2[Vars::v1];
	Vars::text := "04:"; if Vars::p1=$0402 then Common::PASS() else Common::FAIL();
end;

procedure Advanced05();
begin
	Vars::p2:=$4000;
	Vars::p2[1]:=$20;
	Vars::v1:=1;
	Vars::p1:=$0400;
	asm(";here");
	Vars::p1:=Vars::p1 + Vars::p2[1]*2;

	Vars::text := "05:"; if Vars::p1=$0440 then Common::PASS() else Common::FAIL();
end;

procedure Advanced06();
begin
	Vars::p2:=$4000;
	Vars::v1:=1;
	Vars::v2:=3;
	Vars::p2[Vars::v1]:=$20;
	Vars::p1:=$0400;
	Vars::p1:=Vars::p1 + Vars::p2[Vars::v1]*Vars::v2 + $10;
	Vars::text := "06:"; if Vars::p1=$0470 then Common::PASS() else Common::FAIL();
end;
/*
	Completely aware that this one fails. Works with *1, also with pointer +
*/
procedure Advanced07();
begin
	Vars::p2:=$4000;
	Vars::p2[1]:=$20;
	Vars::v1:=1;
	Vars::p1:=$0400 + Vars::p2[1];
	Vars::text := "07:"; if Vars::p1=$0420 then Common::PASS() else Common::FAIL();
end;

procedure Advanced08();
begin
	Vars::p2:=$4000;
	Vars::p2[1]:=$20;
	Vars::p1:=$0400 + Vars::p2[1]*3;
	Vars::text := "08:"; if Vars::p1=$0460 then Common::PASS() else Common::FAIL();
end;
/*
procedure Advanced09();
begin
	Vars::p2:=$4001;
	Vars::v1:=3;
	Vars::p2[1]:=$20;
	Vars::p1:=$0400 + toPointer(hi(Vars::p2)+$10*Vars::v1,lo(Vars::p2)*3+Vars::p2[1]*2)*2;
	
	Vars::text := "09:"; if Vars::p1=$E486 then Common::PASS() else Common::FAIL();
end;
*/
procedure Exec();
begin

	// initialise everything
	Common::Initialise("ADVANCED TESTS");
	
	Advanced01();
	Advanced02();
	@ifndef AMSTRADCPC
	Advanced03();
	Advanced04();
	Advanced05();
	Advanced06();
	Advanced07(); 
	Advanced08();
	@endif
//	Advanced09();// fails
	Common::WaitABit();
end;

end.