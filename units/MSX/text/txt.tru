unit txt;
@use "screen"
var
	i,y,p:byte;
	CH:byte;
	@donotremove CH
	LATEST_SCANCODE: byte;
	temp_address_p: pointer of byte;
	
	Active_Page_Number:integer;
	
	ytab : array[25] of integer=(
		0,0,0,0,0,0,
		0,0,0,0,0,0,
		0,0,0,0,0,0,
		0,0,0,0,0,0);
	screen_memory: pointer;
	max_digits,next_digit: integer;
	temp_num_p: pointer;
	temp_num: integer;
	temp_i: byte=0;
	this_bbc: byte=0;
	in_str: pointer;
	@donotremove in_str
	CRLF: byte;
	@donotremove CRLF
	_match:byte;
	o_cx:byte;
	o_cy:byte;
	
	user_input: pointer;
	user_str: string = ("                                   ");
	
	
	// PC cursors		        
	const CUR_U: byte = $48;
	const CUR_D: byte = $50;
	const CUR_L: byte = $4B;
	const CUR_R: byte = $4D;


	/**
	
	Put a character at current cursor position
	
	**/
	procedure put_ch(CH: global byte);
	begin
		asm
			
			ld a,[txt_CH]
			call $00A2	
			ld a,65
			call $00A2	
		end;
		

	end;

	/**
	
	Helper to set up screen pointers etc
	
	**/
	procedure DefineScreen();
    begin

	    
	    if(ytab[0]<>0) then
		begin
			return;
		end;

		temp_address_p:=$B800;

		// Fill the lookup table with screen positions		
		fori y:= 0 to 24 do
		begin
			ytab[y]:=temp_address_p;
			temp_address_p:=temp_address_p+40;					
		end;
	    

    end;
    
    

    /**

	 Escape sequence
    
    **/
    procedure esc();
    begin


	    put_ch($1B);   
	    put_ch($5B);   

    end;


    
	/**

	Place the cursor at 0,0 top left of screen
	
	**/
	procedure cursor_home();
	begin


    end;

	/**
	
	Place the cursor at X, Y screen position
	
	**/
	procedure move_to(_text_x: byte, _text_y: byte);
    begin

	    
    end;
	
	/**
	
	Wait for vertical blank (not yet implemented)
	
	**/
	procedure wait_vsync();
    begin
	    waitforverticalblank();
    end;

	/**
	
	Set the text colour (not available on all platforms)	
	
	**/
	procedure text_colour(_chosen_text_colour: byte);
    begin
	    
    end;	
	


	/**

	Get a character input from the keyboard	
	
	**/
	function get_key():byte;
	var

    begin

	    get_key:=CH;
    end;
    
    
	/**

	Get a character input from the keyboard	
	
	**/
	function get_scancode():byte;
    begin

	    
	    get_scancode:=CH;
    end;
    
        
    
	/**
	
	Wait for a key press	
	
	**/
	procedure wait_key();
    begin
	    get_key();
    end;
	/**

	Clear the keyboard buffer	
	
	**/
	procedure clear_buffer();
    begin
	    
    end;


	/**
    
    Get current cursor position to o_cx,o_cy
	
	**/
 	procedure get_cursor_position();
    begin

	end;    

	/**
	
	Put a character at a X, Y screen coordinate
	
	**/
    procedure put_char_at(_atx,_aty,_atchar:byte);
 	    
    begin
	    

	    
    end;

	/**

	Output a string at the current cursor location.
	Set Carriage Return on/off	
	
	**/
	procedure print_string(in_str: global pointer, CRLF: global byte);
	var
		
    begin
		while(in_str^<>0) do
		begin
			if(in_str^>=$20) then put_ch(in_str^);
			in_str:=in_str+1;
		end;
	    
	    if(CRLF=true) then 
	    begin
		    put_ch(13);
		    put_ch(10);
	    end;
	    
    
    end;



	/**
	
	Return the character at chosen screen position
	
	**/
    function get_char_at(_col,_row:byte):byte;
    begin

		temp_address_p:=$B800;
		temp_address_p+=(_row*80);
		CH:=temp_address_p[_col*2];
	    
	    // return the character
	    get_char_at:=CH;

    end;    



	procedure beep();
	begin
		
		put_ch(7);
		
		
	end;


	/**
	
	Output a string representation of a decimal number at current cursor position
	Set if you want carriage return true/false
	
	**/
	procedure print_dec(_in_n:byte, _add_cr:byte);
	begin
		
		Screen::PrintString(_in_n);
	    if(CRLF) then 
	    begin
		    put_ch(10);
		    put_ch(13);
	    end;
	    
		
	end;

	/**
	
	Convert string to decimal number
	
	**/
	function str_to_dec(_in_str:pointer):byte;

	/**
	
	Get numeric input from keyboard
	
	**/
	function get_dec():integer;

	/**
	
	Get screen page
	
	**/    
    procedure get_page();
    begin

	    
    end;
    
	/**
	
	Hide flashing cursor
	
	**/
	procedure cursor_off();
	var

    begin
	    

	    
    end;

	/**
	
	Show flashing cursor
	
	**/
	procedure cursor_on();
	var

    begin
	    

	    
    end;


	/**
	
	Compare two strings for equality
	
	**/

	function str_compare(str1:pointer,str2:pointer):byte;
	var

		
	begin
		
		_match:=false;
		while(str1^<>0) do
		begin
			i:=str1^;
			p:=str2^;	
					
			if(i=p) then 
			begin
				_match:=true;
			end;
			
			str1:=str1+1;
			str2:=str2+1;
		end;

		str_compare:=_match;
	end;


	/**
	
	Output a string representation of a decimal number at chosen position
	
	**/
	procedure put_dec_at(_natx,_naty,_nat:byte);
	begin

		move_to(_natx,_naty);		
		Screen::PrintString(_nat);
		
	end;
	
	
	function str_len(in_str: global pointer):byte;
	begin
		
		i:=0;
		
		// get the Str_Len by counting until char is 0
		while(in_str[i]<>0) do
		begin 
			i:=i+1;
		end;
		
		// Return
		str_len:=i;
		
	end;
	
	// print X spaces
	procedure print_space(max_digits: global integer);
	begin
		
		i:=0;
		for i:=0 to max_digits do
		begin
			put_ch(32);
		end;
		
	end;
	
	/**

	Output a string at the current cursor location but centered.
	Set Carriage Return on/off	
	Set the screen width
	Set reverse on/off
	
	**/
	procedure print_string_centered(in_str: global pointer, CRLF: global byte, _sc_w: byte);
	begin
		
		i:=0;
		max_digits:=0;
		
		// Get the length of the string
		i:=str_len(in_str);

		// padding should be half of width minus string length
		max_digits:=(_sc_w-i)/2;
			
		// Is it worth padding?
		if(max_digits>0 and i < 40) then
		begin	

			// Add the padding
			print_space(max_digits);
			
			// print the string
			print_string(in_str, CRLF);	

		end
		else
		begin
			// print the string
			print_string(in_str, CRLF);	
		end;
		

		
	end;

procedure crlf();
begin
	
	txt::put_ch(10);
	txt::put_ch(13);
	
end;
	
function get_string():byte;
var
	

begin
	
	user_input:=#user_str;
	while (i<>13) do
	begin
		
		i:=get_key();
		
		if (LATEST_SCANCODE=$0E) then
		begin
			user_input^:=0;
			user_input:=user_input-1;
			put_ch(i);
		end
		else
		begin
			if(i>=32) then
			begin		
				put_ch(i);
				user_input^:=i;
				user_input:=user_input+1;
			end;				

		end;
		
		user_input^:=0;

	end;
		
	put_ch(10);
	put_ch(13);

	get_string:=user_input;

end;


	function str_to_dec(_in_str:pointer):byte;
	begin

		next_digit:=0;
		temp_num:=0;
		temp_i:=0;
		max_digits:=0;

		while(_in_str[max_digits]>0) do
		begin
			max_digits:=max_digits+1;
		end;
		max_digits-=1;

		for temp_i:=0 to max_digits do
		begin

			if(_in_str[temp_i]=48) then
			begin
				next_digit:=0;
			end
			else
			begin
				next_digit:=_in_str[temp_i]-48;
			end;

			temp_num:=(temp_num*10)+next_digit;
		end;

		str_to_dec:=(temp_num);
	end;	

	function get_dec():integer;
	begin
		temp_num_p:=get_string();
		get_dec:=(str_to_dec(temp_num_p));
	end;



   
	/**
	
	Clear screen and initialise pointers 
	Required for move_to etc
		
	**/
  	procedure cls();
    begin

		asm
			xor a
		end;
		
		call(^$c3);


    end;


end.