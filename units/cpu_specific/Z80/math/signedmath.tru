unit SignedMath;

@ifndef @muldivtables
//@error "Please declare the preprocessor 'muldivtables' to point to a available memory position starting on a new page (ie ends with $XX0) before using this unit."
@endif


var
	@donotremove PRODUCT
	PRODUCT: integer;
	T1,T2,neg: byte; // temp value area	
	
	@donotremove square1_lo
	@donotremove square1_hi
	@donotremove square2_lo
	@donotremove square2_hi



@startblock @muldivtables "Signed mul/div tables"
	square1_lo :array[512] of byte=BuildTable("((i*i)/4)&0xFF");
	square1_hi :array[512] of byte=BuildTable("(i*i)/4/256");
	square2_lo :array[512] of byte=BuildTable("(i-255)*(i-255)/4");
	square2_hi :array[512] of byte=BuildTable("(((i-255)*(i-255))/4)>>8");
@endblock



@donotremove Init
procedure Init();
begin
/*	asm("
	; by jackasser

multiply_8bit_unsigned
                bcc m8b_next
                    lda SignedMath_T1
                    sta m8s_sm1+1
                    sta m8s_sm3+1
                    eor #$ff
                    sta m8s_sm2+1
                    sta m8s_sm4+1
m8b_next:

                ldx SignedMath_T2
                sec
m8s_sm1:            lda SignedMath_square1_lo,x
m8s_sm2:            sbc SignedMath_square2_lo,x
                sta SignedMath_PRODUCT+0
m8s_sm3:            lda SignedMath_square1_hi,x
m8s_sm4:            sbc SignedMath_square2_hi,x
                sta SignedMath_PRODUCT+1

                rts


multiply_8bit_signed:
                jsr multiply_8bit_unsigned

                ; Apply sign (See C=Hacking16 for details).
                lda SignedMath_T1
                bpl sign_nxt
                    sec
                    lda SignedMath_PRODUCT+1
                    sbc SignedMath_T2
                    sta SignedMath_PRODUCT+1
sign_nxt:
                lda SignedMath_T2
                bpl sign_nxt2
                    sec
                    lda SignedMath_PRODUCT+1
                    sbc SignedMath_T1
                    sta SignedMath_PRODUCT+1
sign_nxt2

                rts
	

	");*/
end;

procedure Muls8x8(T1,T2 : global byte);
begin
	asm(" 
		sec
		jsr multiply_8bit_signed 
		lda SignedMath_PRODUCT
		ldy SignedMath_PRODUCT+1
	");
end;

procedure Divs16x8(PRODUCT:global integer; T1 : global byte);
begin
	if (hi(PRODUCT)>=128) then 
	begin
		neg:=true;
		PRODUCT := 0 - PRODUCT;
		
	end else neg:=false;
	
	PRODUCT := PRODUCT/T1;
	
	if (neg=true) then 
		PRODUCT := 0 - PRODUCT
	else
		asm("
		lda SignedMath_PRODUCT
		
		");		
/*	asm(" 
		lda SignedMath_PRODUCT
		ldy SignedMath_PRODUCT+1
	");
*/	
end;
end.
