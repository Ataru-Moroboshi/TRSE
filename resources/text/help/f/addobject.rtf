
<h3>AddObject([type], [name], [parent], [material], [x],[y],[z], ... [object-specific propreties (radius, length etc)])</h3>

<ul>
<li>String 1: type of object. See list of types below.</li>
<li>String 2: Unique name (ID) of object</li>
<li>String 3: Parent object ID ("" if none)</li>
<li>String 4: Material name</li>
<li>Number 5-7: X/Y/Z position of object/li>
<li>Number 8-??: Various object parameters, determined by object type</li>
</ul>
Here follows a list of valid object types as defined by the first parameter:
<h3>Sphere</h3>
Parameter 8 defines the radius of the sphere. Create a sphere of radius 10 at position (0,0,0):
<code>AddObject("sphere","mySphere","","Material0", 0,0,0, 10,0,0)</code>
<h3>Torus</h3>
Parameter 8 and 9 defines the minor and major radius. Create a torus of radius 10/5 at position (0,0,0):
<code>AddObject("torus","myTorus","","Material0", 0,0,0, 10,5,0)</code>
<h3>Box</h3>
Parameter 8,9 and 10 defines the X/Y/Z scaling factor of the box. Create a box of size 1 at position (0,0,0):
<code>AddObject("box","myBox","","Material0", 0,0,0, 1,1,1)</code>
<h3>Cylinder</h3>
Parameter 8,9 and 10 defines the radius / smoothness / length of the cylinder. Create a cylinder with radius 0.3 at position (0,0,0) with length 1 and no smoothness:
<code>AddObject("cylinder","myCylinder","","Material0", 0,0,0, 0.2,0,1)</code>
<h3>Plane</h3>
Parameter 8,9 and 10 defines the normal of the plane. Create a plane pointing up (0,1,0) at position (0,0,0):
<code>AddObject("plane","myPlane","","Material0", 0,0,0, 0,1,0)</code>
<h3>Mesh (experimental)</h3>
Adds a wavefile (obj) mash to the scene. Parameter 5 points to the .obj file, while
paramter 6 is the global scale of the object data. If parameter 7 is set to "1", the object
normals are inverted, 0 if not. The remaining three parameters are the x/y/z world coordinates of the object.
Example:
<code>AddObject("mesh","myTeapot","","Material0", "meshes/teapot.obj",0.5,0   x,y,z)</code>
<h3>Char</h3>
This method will create a 3D character from a 8x8 font. You can either load a general TRSE .flf charset, or simply
specify the C64 ROM font.
Example that places out a C64 rom character "A" at position (x,y,z) with a given width and stretch.
<code>
font ="rom"
character = 1 -- 1 is "A" in petscii, 2 is B etc
-- font can also point to a file in the project, such as
-- font = "charsets/charset1.flf"

AddObject("char","char1", "", "Material2",  font, character,
x,y,z,            -- position
width_x,width_y,width_z,      -- width xyz
stretch_x,stretch_y,stretch_z  -- stretch xyz
);

</code>

<h3>Perlin</h3>
This is not really an object type, but acts as a filter. Take any object and transform the surface
through a 3D perlin noise perturbation field. Example: Create a cylinder, and then transform the
object through a perlin noise field with scale "20" and amplitude "0.08":
<code>
-- create cylinder
AddObject("cylinder","myObject","","Material0",  0,0,0, 0.5,0.0,1 );
-- send "myObject" through the perlin filter and name the new object "myPerlinObject"
-- Amplitude of perlin noise filter is 0.08, while the scale is 20
AddObject("perlin","myPerlinObject","","Material0",  "myObject",  0.008,20)
</code>
You can apply multiple perlin noise filters to a given object.


