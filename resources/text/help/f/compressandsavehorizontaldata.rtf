<h3>CompressAndSaveHorizontalData( [ data width], [ compression rate ], [ compressed rows ], [ table of rows ] );</h3>
This is an advanced method that will do the following:
<ul>
  <li>Operate on a data set consisting of H rows with width W bytes (so the total size is H*W)
  <li>Will analyze whichever rows are similar based to a compression level
  <li>Will output two files: one file with all the compressed data, and another
      file that contains the lookup table for the data rows.
</ul>
Example: In the Fjong tutorial #3, a 32x32 pixel torus is ray-traced to 64 frames. If stored
in raw format, this would total 32x32*64 = 64k of data, and would not fit into the C64 memory. Instead, we
CompressAndSaveHorizontalData will create a table of similar rows and therefore compress the
data. You now have to use a lookup table to access the data, where the compression level is
defined by "how similar" each row is.

<code>
-- Assume data width is 32 bytes. Then
dataWidth = 32
-- more compression ratio = lower quality = reduced data size
compressionRatio = 3
CompressAndSaveHorizontalData(dataWidth,compressionRatio, "data.bin","table.bin")
</code>
