<h3>MemCpy( [address1 source], [byte1 offset], [address2 destination], [byte2 total] );
</h3>
<ul>
    <li>[address1 source] - Source address to copy from</li>
    <li>[byte1 offset] - offset to start copying from</li>
    <li>[address2 destination] - destination address to copy to</li>
    <li>[byte2 total] - number of bytes to copy</li>
</ul>


<h3>Description</h3>
<p>Copies 0-255 (parameter 4) bytes of memory from source address (parameter 1 + parameter 2) to destination address (parameter 3).</p>


<h3>Example</h3>

<code>
    // copies 40 bytes of data from my_data to the first row of the screen (bank 0)
    MemCpy(my_data, 0, ^$0400,40);
</code>

<p>MemCpy also supports copying with zero pages:</p>

<code>
    // copies 160 bytes = 4 rows from color memory to some user-defined pointer
    MemCpy(^$D800, 0, my_ptr, 160);
</code>

<h3>Notes:</h3>

<p>MemCpy is the slowest. It copies 0-256 bytes from A to B by basically (in assembler) saying </p>
<p>This is slow because for every copied byte, it needs to decrement i and test if it is zero and go to the top again</p>

<code>
    for i:=0 to 256 do B[i] := A[i];
</code>