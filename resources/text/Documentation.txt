Constants and variables
	SCREEN_BG_COL
		<h2>Screen border color</h2>
		Ever heard of 53280?<br>
		SCREEN_BG_COL:=BLACK;<br>

	SCREEN_FG_COL
		<h2>Screen background color</h2><br>
		Ever heard of 53281?<br>

        SCREEN_FG_COL:=BLACK;

    VIC_BANK0

    VIC_BANK1
    VIC_BANK2
    VIC_BANK3
    VIC_DATA_LOC($D018)
	RASTERLINE_POS($D012)
	SPRITE_POS($D000)
	SPRITE_DATA_LOC ($07F8)
	SPRITE_BITMASK ($D015)
	SPRITE_COLOR ($D027)
	SPRITE_COLLISION ($D01E)
	SPRITE_BG_COLLISION ($D01F)	
	SPRITE_STRETCH_X ($D01D)	
	SPRITE_STRETCH_Y ($D017)
	SPRITE_MULTICOLOR ($D01C)
	SPRITE_MULTICOLOR_REG1 ($D025)
    SPRITE_MULTICOLOR_REG2 ($D026)
    MULTICOLOR_CHAR_COL ($D021)

    SID_TRI
    SID_SAW
    SID_PULSE
    SID_NOISE
    SID_CHANNEL1
    SID_CHANNEL2
    SID_CHANNEL3

    SID ($D400)

    SIDFILE_1_INIT
    SIDFILE_2_INIT
    SIDFILE_1_PLAY
    SIDFILE_2_PLAY


	zeropages
                <h2>Zeropages and pointers</h2>
                Zeropages are in TRSE defined as pointers. The individial addresses
                for the zeropages are defined in the TRSE settings dialoge, and will be chosen
                from this pool. Usage:<br>
                <br>
                var<br>
                   myPtr: pointer;<br>
                <br>
                ...<br>
                 <br>
                myPtr:=$D800; // point to color memory<br>
                myPtr[64]:=$08; // set 64th value of zp, so $D800+64<br>
                inczp(myPtr,40); Jump down 40 columns<br>
                ...<br>
                myPtr:=someData;

	sine
		<h2>sine</h2>
                Sine is a table of 256 bytes.
	screenmemory
                <h2>screenmemory</h2>
                screenmemory is a built-in zero page pointer that is used with the
                <b>moveto</b> method.

Built-in methods
	abs
                <h2>abs( [ variable or number ]);</h2>
                Returns the absolute value of the number/variable.

	clearbitmap
		<h2>ClearBitmap( [ address ], [ fillsize = 256*lines ] );</h2><br>
		Clears a bitmap / any kind of memory with 256*parameter 2 bytes. For example:<br>
		<font color="@code">ClearBitmap($2000, 32);</font><br>
		Clears 8192 (32*256) bytes at $2000.
	clearscreen
		<h2>ClearScreen( [ char ], [ address ]); </h2>
		Clears exactly 40*25 = 1000 bytes of memory at the given address with the provided value. Example:<br>
		<font color="@code">ClearScreen($20, ^$0400);</font><br>
		Fill the screen memory of bank 0 with space ($20)

	clearsound
                <h2>ClearSound();</h2>
                Terminates all sound on SID (setting control flags to zero).

	closeirq
		<h2>CloseIRQ( ));</h2>
		Closes an IRQ method. For example: <br>
		<font color="@code">
		RasterIRQ(myRaster(), 0, 1); // Assign myRaster with kernel (1)<br>
		...<br>
		procedure myRaster();<br>
		begin<br>
		  startirq(1); // start IRQ with raster<br>
		  ...<br>
		  closeirq();<br>
		end(); </br>
		</font>


	copycharsetfromrom
		<h2>CopyCharsetFromRom( [ destination address ]);</h2>
		Copies the standard ROM charset to the specified address. Example: <br><br>
		<font color="@code">copycharsetfromrom(^$5000);</font><br>


	copyfullscreen
		<h2>CopyFullScreen(addr_from, addr_to);</h2>
		CopyFullScreen copies 40*25 bytes of information ( a full screen ) from 
		the source to target address. For example, CopyFullScreen(^$0400, ^$4400) will copy all
		data from the screen on bank 0 to bank 1.

	copyimagecolordata
                <h2>CopyImageColorData( [ data_address ], [ bank=0..3] );</h2>
                Copies 800 bytes of TRSE .flf-exported multicolor image data
                to image and color memory. Usage: <br>
                <br>
                <font color="@code">
                program Tutorial6;<br>
                var<br>
                        image_color: IncBin("images/moose_color.bin", "$5000");<br>
                        image_data: IncBin("images/moose_data.bin", "$6000");<br>
                <br>
                begin<br>
                        setmulticolormode();<br>
                        setbitmapmode();<br>
                        poke(VIC_DATA_LOC, 0,$18);<br>
                        setbank(VIC_BANK1);<br>
                        copyimagecolordata(image_color,1);<br>
                        SCREEN_FG_COL:=BLACK;<br>
                        Loop();<br>
                end.<br>
                </font>

    dec
		<h2>dec(address);</h2>
		dec(a) is exactly the same as a:=a-1.




    decrunch
                <h2>Decrunch( [ address] or [ variable ]);</h2>
                When including a exomizer-compressed file, you can decrunch it
                either by pointing directly to the memory address (really, the memory address
                + length of the file) or by automagically letting TRSE extract the file size.
                Example: Assume you have a $199-byte compressed file that you would like to uncompress:
                <br>
                <br>
                <font color="@code">
                var
                  compressed_data: incbin("my_data.bin",$8000);<br>
                  <br>
                ...<br>
                <br>
                decrunch($8199);
                // OR
                decrunch(compressed_data);
                </font>
    decrunchfromindex
    			<h2>DecrunchFromIndex( address_list, index);</h2>
    			When crunching data using a paw file, you need to specify the name of an address list. This address list is used as the first parameter in DecrunchFromIndex, while the second parameter is the index of the resource you wish to decrunch.<br>
    			<br>
    			...
				DecrunchFromIndex(my_address, i);
				Pause();
				inc(i)

    deczp
                <h2>deczp( [zeropage], [ val ] );</h2>
                Decreases the mentioned zeropage pointer by [ val ] bytes. <br>
                Example:<br>
                <font color="@code">deczp(zeropage2, 64);</font><br>

	disableciainterrupts
		<h2>DisableCIAInterrupts();</h2>
		Disables all CIA interrupts

	enableallram
                <h2>EnableAllRam();</h2>
                Let's all the ram on the C64 be visible (seting the first three bits
                of address $01 to %100. Handy for reading from $D000 etc.
                Remember to restore the original value:<br>
                <font color="@code">
                orgVal := peek(^$01,0);<br>
                EnableAllRam();<br>
                memcpy(^$D000,0, ^$4000, 128);<br>
                poke(^$01,0,orgVal); // Restore original value <br>
                </font><br>

	enableirq
		<h2>EnableIRQ</h2>
		Enables all irqs (basically a <b>cli</b> command)

	fill
		<h2>fill ( [ addr ], [ value ], [ count &lt;$ff ] )</h2><br>
		Fills [count] bytes with [value] at the [address].
		Examples:<br>
		<font color="@code">fill(zeropage4, 0, 0);</font><br>
		Fills values at zeropage4 with 256 bytes of 0<br>
		<br>
		<font color="@code">fill(^$0400, $20, 40);</font><br>
		Fills the first 40 bytes of screen memory with blanks (value $20)<br>
		<br>

    fld
                <h2>fld( [ num raster lines], [is text mode=0, bitmap mode=1] );</h2>
                Performs a demo effect FLD shift of a given number of raster lines.
                Must specify whether you are in text mode(0) or bitmap mode(1)

    getbit
    		<h2>GetBit(address, bit)</h2>
    		GetBit(address, bit) returns 0 or 1 depending on whether the bit at the specified address is set. Example:
    		<font color="@code">if (GetBit(SPRITE_BITMASK,3)==1) then ...</font><br>
    		(Start a code block if sprite 3 is active)

    inc
		<h2>inc(address);</h2>
		inc(a) is exactly the same as a:=a+1.


	inczp
		<h2>inczp( [zeropage], [ val ] );</h2>
		Increases the mentioned zeropage pointer by [ val ] bytes. <br>
		Example:<br>
		<font color="@code">inczp(zeropage2, 64);</font><br>

    jammer
                <h2>jammer( [ raster line number ], [ jammer color] );</h2>
                Jammer is a debugging tool that sets a specific background color and jams the processor
                if a certain raster line is reached. Useful for testing whether certain raster IRQs
                stay within their limits. Usage:<br>
                <font color="@code">jammer(150, YELLOW); // crashes the processor with yellow bg if line 150 is hit</font><br>

	joystick
		<h2>Joystick();</h2>
		Reads the joystick port values and populates joystick variables:<br>
		joystickup, joystickdown, joystickleft, joystickright, joystickbutton. values are 1 if registered and 0 if not. Joystick
		currently only supports port 2, from TRSE version 0.05 there will be support for both joysticks.

    keypressed
                <h2>Keypressed( [ key code ]);</h2>
                Returns 1 if key is pressed, 0 if not. Example:<br>
                <font color="@code">
                if (keypressed(KEY_SPACE)=1)then begin<br>
                ...<br>
                end;<br>
                </font><br>
                Key codes are KEY_SPACE, KEY_A, KEY_F5, KEY_PLUS, KEY_COMMODORE etc<br>

    loop
                <h2>loop()</h2>
                Performs and infinite loop (halts the process)

	memcpy
		<h2>memcpy( [ src Addr ], [ src shift ], [ dst addr], [ count &lt;$ff ] )</h2>
		copies [ count ] bytes from src+shift to destination. <br><br>
		Examples:<br>
        <font color="@code">
		memcpy(^$0400, 0, $0480, 40);<br>
		memcpy(^$D800+^40*^2, 0, ^$D800+^40*^3, 80);<br>
		</font>

	moveto
		<h2>moveto( x, y, [ address high byte ] ); </h2><br>
		Move the screen cursor pointer "screenmemory" to position x,y on the screen with the given high byte.<br><br>
		Example:<br>
		<font color="@code">
		moveto(0,5, $04);<br>
		for i:=0 to 40 do
			screenmemory[i]:=i;
		</font>
		<br>
		fills the 5th row of screen bank 0 ($0400) with 40 bytes from 0 to i.

    nmiirq
                <h2>NMIIrq( [ procedure ]);</h2>
                Sets the NMI interrupt query to a given procedure. Let procedure be blank
                to disable completely. Example:<br>
                <font color="@code">
                interrupt MyEmptyNMI();<br>
                begin<br>
                <br>
                end;<br>
                ...<br>
                nmiirq(MyEmptyNMI());
                </font>
                <br>

	peek
		<h2>peek( [ addr ], [ shift ])</h2>
		Retrieves value at address with shift. Must take address as input with ^.
		Example: <br>
		<font color="@code">a:=peek(^$D800, 0);</font><br>
		Retrieves the first byte of color ram<br>
		<br>
		<font color="@code">a:=peek(var, 4);</font><br><
		Retrieves the 4th byte of array, same as a:=var[4];<br>
		<br>
		<font color="@code">a:=peek(zeropage2, i);</font><br>
		Retrieves the ith value of zeropage2, same as a:=zeropage[i];
	playsound
		<h2>Playsound();</h2>
		Plays a single sound. Usage:<br>
		<font color="@code">
			PlaySound(SID_CHANNEL1, <br>
				13,  // Volume<br>
				20,  // Hi byte frequency<br>
				0*16+0,  // Attack voice 1<br>
				3*16 + 12,   // Sustain = 16*15 + release=6<br>
				1 +SID_SAW,  // Waveform<br>
				SID_SAW);  // waveform <br>
		</font>
		Channels are SID_CHANNEL1, SID_CHANNEL2 or SID_CHANNEL3 while waveform 
		can be SID_SAW, SID_TRI, SID_PULSE and SID_NOISE.

	poke
		<h2>poke( [ addr], [ shift], [ val ]);</h2>
		Sets the value at address with shift. Must take address as input with ^.
		Example: <br>
		<font color="@code">poke(^$D800, 3, 1);</font><br>
		Sets the third byte of color ram to white (1)<br>
		<br>
		<font color="@code">poke(var, 4,a);</font><br><
		Sets the 4th byte of array to a, same as var[4]:=a;<br>
		<br>
		<font color="@code">poke(zeropage2, i, 0);</font><br>
		Sets the ith value of zeropage2 to zero, same as zeropage[i]:=0;
	preventirq
		<h2>PreventIRQ</h2>
		Prevents all interrupts (basically a <b>sei</b> command)

	printdecimal
		<h2>PrintDecimal(number, [number of digits])</h2>
		Prints a decimal number (byte or integer) at the current screenmemory position (see <b>moveto</b>).
		Example:  <font color="@code">PrintDecimal(player_health, 1); </font> <br>
		(displays the byte <i>player_health</i> with 2 decimal numbers)

	printnumber
		<h2>Printnumber( number (byte))</h2>
		Outputs the hexidecimal value of the byte parameter at the current screen position (using moveto())


	rasterirq
		<h2>RasterIRQ( [ raster routine ], [ raster line], [ use kernal ]); </h2>
		Hooks the raster irq to a procedure to fire at a given line. Example: <br>
		<font color="@code">
		RasterIRQ(myRaster(), 0, 1); // Assign myRaster with kernel (1) to fire at rasterline 0<br>
		...<br>
		procedure myRaster();<br>
		begin<br>
		  startirq(1); // start IRQ with raster<br>
		  ...<br>
		  closeirq();<br>
		end(); </br>
		</font>

    return
                <h2>Return();</h2>
                Simply performs a rts, useful for termninating conditionals in procedures.
	screenoff
				<h2>ScreenOff();</h2>
				Turns the screen off
	screenon
            <h2>ScreenOff();</h2>
            Turns the screen off
    scrollx/scrolly
    		<h2>Scrollx([value]); Scrolly([value])</h2>
    		Sets the scroll registry to [value] pixels (between 0-7) in either the x or y direction.

	setbank
		<h2>SetBank(VIC_BANK[0-3]);</h2>
		Sets current VIC bank 0-3 (VIC_BANK0, VIC_BANK3 etc).

    setbitmapmode
                <h2>SetBitmapMode();</h2>
                Sets the VIC 320x200 bitmap mode.

    setcharsetlocation
    			<h2>SetCharsetLocation( [ address]);</h2>a
    			This method lets the user set the charset address on the local VIC bank. For instance,
    			if you have included a character set at $2000 in memory, you simply use SetCharsetLocation($2000) to
    			use the charset. If you include your charset data on $6000 at bank 1, you still only write 
    			SetCharsetLocation($2000).<br>
    			<br>
    			Address value must start with 0 and increment with $0800 bytes, so values must be $0, $0800, $1000, $1800 etc.


    setmulticolormode
                <h2>SetMultiColorMode();</h2>
                Sets the current mode to multicolor mode (4 colors per char).

    setregularcolormode
                <h2>SetRegularColorMode();</h2>
                Sets the current mode to regular mode. (2 colors per char)



	setspriteloc
		<h2>SetSpriteLoc( [ sprite=[0:7], [ dataloc ], [bank=[0:3] );</h2>
		Sets sprite data pointer location. The sprite number (or variable) is limited to
		0-7, while the bank number must be a numeric. The actual sprite position must be located at  64*dataloc.
		<br><br><b>Example:</b><br>
		Assume you have loaded a set of 10 sprites at position $2400. The start of the 64-bit sprite
		chunks is then $2400 / 64 = $90. If you want to set sprite number 4 to the sprite data at chunk 0 (bank 0), you would write<br>
		<font color="@code">setspriteloc(4, $90, 0);</font><br>
		If you want sprite 3 to display the 5rd chunk on bank 1, you type <br>
		<font color="@code">setspriteloc(3, $95, 1);</font><br>
	setspritepos
		<h2>SetSpritePos([x=0:320], [y=0:255], [sprite number 0:7]);</h2>
		Sets the x/y position of sprite [sprite]. Example:<br>
		<font color="@code">setspritepos(x, y, 0);</font><br>
		Will set sprite 0 to position x, y (where x can be an integer>256).

	setmemoryconfig
		<h2>setmemoryconfig(io=[0:1], kernal=[0:1], basic=[0:1]);</h2>
		Sets the current memory configuration (memory address $01), enabling or disabling
		BASIC, IO or Kernal. Example:<br>
		To enable IO and Kernal while disabling BASIC, use <br>
		<font color="@code">setmemoryconfig(1,1,0);</font>
    settextmode
                <h2>SetTextMode();</h2>
                Sets the VIC text mode

	startirq
		<h2>StartIRQ( kernal = [0:1]));</h2>
		Starts an IRQ method. For example: <br>
		<font color="@code">
		RasterIRQ(myRaster(), 0, 1); // Assign myRaster with kernel (1)<br>
		...<br>
		procedure myRaster();<br>
		begin<br>
		  startirq(1); // start IRQ with raster<br>
		  ...<br>
		  closeirq();<br>
		end(); </br>
		</font>
    swap
                <h2>Swap( [ var a], [ var b] );</h2>
                Swaps two variables <b>a</b> and <b>b</b>.<br>

	togglebit
		<h2>ToggleBit(address, bit, 0/1);</h2>
		ToggleBit sets the desired bit of the address to either 0 or 1. Example:<br>
		<font color="@code">togglebit(SPRITE_BITMASK, 4, 1);</font><br>
		(turns on rendering of the 5th sprite by setting bit 5 to 1). 
		<br>Also see getbit.

	wait 
		<h2>Wait( [no cycles ])</h2>
		Waits a number of cycles. 

	waitforraster
		<h2>waitforraster( [ line number ]);</h2>
		Wait for the specified raster line.

	waitnoraster
		<h2>waitnoraster( [ line numbers ]);</h2>
		Wait for [ line numbers ] raster lines.



Syntax
	array
		<h2>Array</h2>
		Array of [ data value ] contains an array of the given value. For now, only arrays of <b>byte></b> exist, in addition to zeropage pointer arrays. <br>
		Example<br>
		<font color="@code">
		var
		  myArray: array[16] of byte = (0,1,2,3,4,5,6,7,7,6,5,4,3,2,1,0);<br>
          other_array: array[256] of byte at $8000; // defines the array at location $8000
		</font>
	byte
		<h2>byte</h2>
		8 bits, 2 nibbles, whatever you want to call it, it is the most important thing on the c64. That, and the whole reason it is called 
		"8 bit". If you don't know what a byte is, you don't deserve to use the C64. 
	define
		<h2>@define preprocessor</h2><br>
		The @define preprocessor directive lets you define variables compile-time which will replace
		all occurences in the text. For instance<br>
		<font color="@code">
		@define var "5"<br>
		@define putpixel "myPutPixel();"<br>
		//.. in the code<br>
		for a:=0 to @var do @myPutPixel();<br>
		</font><br>
		you can also use defines to exclude/include blocks of code:<br>
		<font color="@code">
		@ifdef var <br>
		printline("debug",0,10);<br>
		@endif<br>
		</font>
		</br>
	for
		<h2>for</h2><br>
		Syntax with begin blocks:<br><br>
		<font color="@code">
		for a:=0 to 20 do begin<br>
			screenMemory[a]:=b;
			incscreenx(40);
		end;<br>
		</font>
		Syntax without blocks:<br>
		<font color="@code">
		for a:=0 to 16 do <br>
			poke(SCREEN_BG_COL, 0, a);<br>
		<br>
		</font>
		Step syntax <b></b>:<br>
		<font color="@code">
		for a:=0 to 16 step 4 do ..<br>
		<br>
		</font>
		<h3>onpage/offpage</h3>
		<font color="@code">
		for a:=0 to 4 <b>onpage</b> do <br>
		onpage forces the for block on the current page.
		</font>
	if
		<h2>conditionals: if</h2>
		The most basic of conditionals. <br>
		<font color="@code">
		if a>b then begin<br>
		...<br>
		end;</br>
		</font>
		<br>
		With else block, remove the final semicolon ; before the else keyword:<br>
		<font color="@code">
		if a>b then begin<br>
		...<br>
		end</br>
		else<br>
		   a:=b; // do something <br>
		</font>
		<br>
		The TRSE compiler tries to measure the size of the conditional block, and produces either an inpage or offpage branch. However, this might at times fail. It is therefore possible to force an offpage/onpage branch by using the onpage (&lt;127 bytes, fast) or offpage (&gt;127 bytes) keywords.<br>
		<br>
		Example: 
		<font color="@code">
		if a>b onpage then begin  // Force the branch to be fast/small, but requires less than 127 bytes of code<br>
		...<br>
		</font>
		<h3>Multiple logical conditionals</h3><br>
		Two keywords, <b>and</b> and <b>or</b> can be used for multiple logical conditionals.<br>
		<font color="@code">
		if (a>b and (b<c or d<>a)) then begin <br> 
		...<br>
		</font>
		Multiple logical conditionals always enforce offpage branching. 


	incbin
		<h2>IncBin("file.bin", "$address");</h2>
		Includes a binary file at the given address. <br>Example:<br>
                <font color="@code">IncBin("levels.flf", $4000);</font>
				 

	include
		<h2>@include preprocessor</h2><br>
		@include lets you include another source file. Syntax:<br>
		<font color="@code">
		@include "../Lib/MyGfxLib.ras"<br>
		</font>

	incsid
		<h2>IncSid("music.sid", "shift");</h2>
                Includes a SID file. Will automatically generate temporary files and
                extract sid file header information for automated playback. See call(SIDFILE_1_PLAY)
                and initsid(SIDFILE_1);

	procedure
		<h2>procedures</h2><br>
		User-defined procedures:<br>
		<font color="@code">
		procedure MyProc(a,b : byte);<br>
		begin<br>
		   ...<br>
		end;<br>
		</font>
		<br>
		To call a procedure:<br>
		<font color="@code">
		MyProc(10,5);<br>
		</font>

	startblock
		<h2>Startblock</h2>
		All variables declared within the block (with the exception of pointers) will be moved to the specified memory address.
		Usage: <br>
		<font color="@code">
		// The following variables are placed at $8000 with text marked in the memory analyzer
		@StartBlock $8000 "My custom varialbe block"<br>
		  arr: array[256] of byte;<br>
		  variable: byte;<br>
		@endBlock

		</font>



