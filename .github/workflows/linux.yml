name: linux

on:
  push:
    tags:
      - '**'

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v2
      - run: sudo apt-get install qt5-default qt5-qmake qtdeclarative5-dev

      # For 'Verify all' tests
      # dbus-x11 seems to be required by vice
      - run: sudo apt-get install lz4 python3 xvfb vice dbus-x11
      - name: Build assemblers (vasm, rgbasm, pasmo)
        run: |
          mkdir tools
          cd tools
          # vasm (Atari)
          wget http://sun.hasenbraten.de/vasm/daily/vasm.tar.gz
          tar -xzf vasm.tar.gz
          cd vasm
          make CPU=m68k SYNTAX=mot -j 2
          cd ..
          # rgbasm (GameBoy)
          git clone https://github.com/gbdev/rgbds.git
          cd rgbds
          # v0.5 removes GLOBAL keyword
          git checkout tags/v0.4.2
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Release
          cmake --build build -j 2
          cd ..
          # pasmo
          wget http://pasmo.speccy.org/bin/pasmo-0.5.4.beta2.tgz
          tar -xzf pasmo-0.5.4.beta2.tgz
          cd pasmo-0.5.4.beta2
          ./configure
          make -j 2
          cd ..
          mv pasmo-0.5.4.beta2 pasmo
          # exomizer
          wget https://bitbucket.org/magli143/exomizer/wiki/downloads/exomizer-3.1.0.zip
          unzip exomizer-3.1.0.zip -d exomizer
          cd exomizer/src
          make -j 2
          cd ../..
          # Install ROMs to be able to run VICE
          wget https://sourceforge.net/projects/vice-emu/files/releases/vice-3.5.tar.gz/download -O vice-3.5.tar.gz
          tar -xzf vice-3.5.tar.gz
          mkdir -p ~/.config/vice/
          cp -r vice-3.5/data/* ~/.config/vice/
          # leave tools directory
          cd ..
          # patch dirs
          sed -i "s,^vasmm =.*,vasmm = ${PWD}/tools/vasm/vasmm68k_mot," Publish/publish_linux/trse.ini
          sed -i "s,^gameboy_rgbasm_dir =.*,gameboy_rgbasm_dir = ${PWD}/tools/rgbds/build/src," Publish/publish_linux/trse.ini
          sed -i "s,^pasmo =.*,pasmo = ${PWD}/tools/pasmo/pasmo," Publish/publish_linux/trse.ini
          sed -i "s,^exomizer =.*,exomizer = ${PWD}/tools/exomizer/src/exomizer," Publish/publish_linux/trse.ini
          c1541=$(which c1541)
          echo "Found c1541 in: '${c1541}'"
          sed -i "s,^c1541 =.*,c1541 = ${c1541}," Publish/publish_linux/trse.ini
          x64=$(which x64)
          echo "Found x64 in: '${x64}'"
          sed -i "s,^emulator =.*,emulator = ${x64}," Publish/publish_linux/trse.ini

      - name: Build TRSE
        run: |
          # PREFIX is here for the AppImage build
          qmake PREFIX=/usr TRSE.pro
          make -j 2 -k

      # Construct and publish the linux binary package
      - name: Build tar.gz
        run: cd Publish/publish_linux && ./publish nightly
      - name: Publish tar.gz
        uses: ColinPitrat/update-release@master
        with:
          release: nightly
          message: Nightly build
          body: The latest automated nightly build of TRSE which succeeded. This is the recommended version to use.
          files: Publish/publish_linux/trse_linux64.tar.gz
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}

      # Construct and publish the AppImage
      # Note: we're relying on the previous call to publish_linux to have copied everything that is needed under Publish/publish_linux/trse
      # TODO(ColinPitrat): Migrate the whole of publish_linux to the `make install` generated by qmake
      - name: Build AppImage
        run: |
          make INSTALL_ROOT=Publish/publish_linux/trse install; find Publish/publish_linux/trse
          cd Publish/publish_linux/
          # TODO(ColinPitrat): This cleanup wouldn't be necessary if we were using `make install` to do the full publish part (we would need 2 make install calls though: one for tar.gz and one for AppImage)
          rm -rf trse/{bin,lib}
          # We need (at least some of) those dirs in both places, which is a bit weird.
          # TODO(ColinPitrat): Understand why and try to have them in only one place.
          cp -r trse/{project_templates,themes,tutorials,units} trse/usr/

          wget -c https://github.com/$(wget -q https://github.com/probonopd/go-appimage/releases -O - | grep "appimagetool-.*-x86_64.AppImage" | head -n 1 | cut -d '"' -f 2) -O appimagetool
          chmod +x appimagetool
          ./appimagetool -s deploy trse/usr/share/applications/trse.desktop

          find trse | grep ld-linux
          chmod a+x trse/lib*/ld-linux-* trse/usr/lib*/ld-linux-* || echo "chmod failed"
          chmod 755 trse
          VERSION=nightly ARCH=x86_64 ./appimagetool ./trse
      - name: Publish AppImage
        uses: ColinPitrat/update-release@master
        with:
          release: nightly
          message: Nightly build
          body: The latest automated nightly build of TRSE which succeeded. This is the recommended version to use.
          files: Publish/publish_linux/TRSE-nightly-x86_64.AppImage
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify tutorials
        run: |
          mkdir bin
          cp trse bin/
          ln -s Publish/tutorials tutorials
          ln -s Publish/source/themes themes
          mkdir -p ~/.local/share/TRSE
          cp Publish/publish_linux/trse.ini ~/.local/share/TRSE/
          cd bin
          xvfb-run --auto-servernum python3 ../Publish/verify_all/verify_all.py `pwd`/trse `which x64`

      - name: Build notification
        if: failure()
        uses: adamkdean/simple-slack-notify@master
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          channel: #bugs
          text: "[GitHub Actions Notification] Linux build failed: ${env.GITHUB_SERVER_URL}/${env.GITHUB_REPOSITORY}/actions/runs/${env.GITHUB_RUN_ID}"
