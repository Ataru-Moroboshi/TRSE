program RasterInterruptsAndSid;
var
	time, mainloop,a,b,i,j, idx, color,val, nextRaster, curCount : byte;
	bar_0, colorIndex, diff : byte;
	bar_s : array[4] of byte = (
	0, 5, 12, 20);
	currentBar, barCount : byte;
 	fade : array [8] of byte = 
(00,11,6,12,4,14,15,1,1,15,14,4,12,6,11,00,00); 
	sidfile: incsid("sid/tutorial5.sid");
	// Regular sidfiles seem to need +2, so incsid("sid/mySid.sid", "2");

@define useKernal 0


interrupt Bars();


procedure UpdateScreen();
begin
	Poke(SCREEN_BG_COL, 0, BLACK);
	Poke(SCREEN_FG_COL, 0, BLACK);

//	Call(SIDFILE_1_PLAY);
	Fill(^$D800 + ^40*^15, fade[(time/4) & 15], 40);
	Fill(^$D800 + ^40*^17, fade[(time/4 + 5) & 15], 40);

end;


interrupt MainRasterTop();
begin
	StartIRQ(@useKernal);
	UpdateScreen();

	time:=time+1;

	bar_s[0] := sine[time*2]/2 + 30;
	bar_s[1] := sine[time*2 + 30]/2 + 30;
	
/*	if bar_s[1]<bar_s[0] then begin
		swap(bar_s[0], bar_s[1]);
	end;
*/
	barCount:=15;
	currentBar:=0;	
	colorIndex:=0;

	nextRaster := bar_s[currentBar];

	RasterIRQ(Bars(), nextRaster , @useKernal);		
	
	CloseIRQ();
end;


interrupt Bars();
begin
	StartIRQ(@useKernal);
	//wait(7);
	SCREEN_BG_COL:=fade[colorIndex];
	SCREEN_FG_COL:=fade[colorIndex];

	nextRaster:=nextRaster+3;
	inc(colorIndex);
	dec(barCount);
	if (barCount<16) then
		RasterIRQ(Bars(), nextRaster, @useKernal)
	else
		RasterIRQ(MainRasterTop(), 0, @useKernal);		

	CloseIrq();	
end;


begin
	InitSid(SIDFILE_1_INIT);

	poke(SCREEN_BG_COL, 0, BLACK);
	poke(SCREEN_FG_COL, 1, BLACK);

	ClearScreen($20, SCREEN_CHAR_LOC);

	
	moveto(8,15, $04);
	printstring("E P I C    H E L L O", 0, 20);
	moveto(0,17, $04);
	printstring("M U S I C   F R O M   D E F L E M A S K", 0, 40);

	mainloop:=1;
	time:=0;

	preventirq();
	DisableCiaInterrupts();
	setmemoryconfig(1,@useKernal,0);
	RasterIRQ(MainRasterTop(), 0,@useKernal);
	enablerasterirq();
	enableirq();

	Loop();

end.