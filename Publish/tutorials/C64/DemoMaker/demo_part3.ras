program DemoMaker;
var  

@define play_music 1
// Turn off kernalr
@define useKernal 0
// Turn on/off raster debug
@define debug_raster 1
// Key for turning on / off rasters
@define rasterDebugKey "KEY_R"
/*
	Pointers must be declared outside of blocks
*/
    p1,zp1,p2,zp2,textPointer: pointer;

@ifdef debug_raster
	show_raster: byte=0;
@endif


// Specify user data
	@userdata "$0400" "$0800" "Bank 1 video temp storage"
	@userdata "$4400" "$4800" "Bank 2 video"
	@userdata "$8400" "$8800" "Bank 3 video"
	
// Main demo music (by Uctumi)
	music: incsid("music/courierb0.sid","2");


// Put all these variables at $F000
@startblock $F000 "Variables"

	// Standard variables
	a,b,c,i,j,k,l,m,n,o : byte;

	// Points to next scene (@scene1, @scene2 etc)
	nextScene: byte=0;
	// 0 if scene is not yet initialized, 1 if initialized
	initComplete:byte=0;  
	// Current row in the timeStamps table
	currentPart: byte = 0;
	// 1 if transition mode is entered (and scene is nearing completion)
	transitionMode : byte=0;
	// keep01 contains the memory config, and is used when decrunching from $D000 etc
	// Currentconfig is a temp variable that is used for storing memory config $01 during wait
	// rater, as the raster might trigger in the middle of a decrunch
	keep01, currentConfig : byte;	
	// time, 0.5*time and 0.25*time
	time, time2, time4 : byte=0;
	// Some standard color themes
	colorsBluePurple: array [16] of byte = (11,6,12,12,4,14,15,1,1,15,14,4,12,12,6,11); 
	colorsGreen : array [16] of byte = (11,11,5,12,13,13,15,7,7,15,13,13,12,5,11,11); 

	/*
			 ***
			*
			 **
			   * C E N E S
  			***
	*/	

	// Set up scenes
	@define scene1 1
	@define scene2 2
	@define scene3 3
	// Timestamps decide order of scenes (column 0) and how long they should last (column 1)
	// Column 2 and 3 are purely optional for extra data (like, displaying same scene multiple times with various
	// colors or character sets)

	timeStamps: array[64] of byte = (		
										@scene1, $7, 0,0, 
										@scene1, $10,2,0

										);


@endblock


// Include automatically generated scenes
@include "packed_resources1.ras"




// Debug raster YES OR NO
@ifdef debug_raster
procedure DebugRaster(dbc:byte);
begin
	if (show_raster=1) then 
		SCREEN_BG_COL:=dbc;
end;

@endif



// Forward declare RasterWaiter
interrupt RasterWaiter();

procedure IncTime();
begin
	inc(time);
	if (time&1=0) then inc(time2);
	if (time&63=0) then time4:=time4+1;


end;


/*
	ProgressTracker is called in every frame of every scene.
	Draws debug rasters
	Plays music	
	Checks whether transitions should occur
	Progresses to new frame

*/

procedure ProgressTracker();
var
	curTimeStamp : byte;
begin
// Play music, display music raster time
@ifdef play_music
@ifdef debug_raster
	DebugRaster(YELLOW);
@endif
	call(SIDFILE_1_PLAY);
@ifdef debug_raster
	DebugRaster(BLACK);
@endif

@endif

	transitionMode:=0;
	// Find timestamp of current scene 
	curTimeStamp:=timeStamps[currentPart*4+1];
	// Is it time to advance to the next scene?
	if (time4=curTimeStamp) then begin
		// Start pointing to the next part
		inc(currentPart);
		// Reset time and time2, but not time 4 (which is used for global timing)
		time:=0;
		time2:=0;
		// new scene is not yet initialized
		initComplete:=0;
		// Point to next scene 
		nextScene:=timeStamps[currentPart*4];
		// Load the raster waiter.
		RasterIRQ(RasterWaiter(),0,@useKernal);
		// Since initComplete is zero and nextScene is set, the main loop will instantly start initializing
		// the next scene.
	end;
	// However, if we are at the final timestep before a change, set transitioning flag to 1
	if (time4=curTimeStamp-1) then transitionMode:=1;

// Toggle raster debugging if raster is on and key is pressed
@ifdef debug_raster
	if (keypressed(@rasterDebugKey)=1) then begin
		show_raster:=(show_raster+1)&1;
	end;
@endif
	// Increase time, time2 and time4
	IncTime();	

end;



// Include a scene
@include "include/scene1.ras"


/*
	Main raster routine 
	Initializes new scene basics
	Waits and play music with black screenoff();
	Makes sure we don't do stuff without turning on $D000 etc

*/
interrupt RasterWaiter();
begin
	// This replaces startirq by always turning ON the vic 
	// in case we were in the middle of a scene initializing decrunch. Remember to restore
	// the original value of $01 at the end of the raster!
	Asm("
		pha
		txa
		pha
		tya
		pha

		lda $01
		sta currentConfig
		lda keep01
		sta $01

		asl $D019
		");

	// Only advance when main loop gives the flag that scene init is complete!
	if (initComplete=1) then begin

		if (nextScene=@scene1) then 
			RasterIRQ(RasterScene1(),0,@useKernal);

	end;

@ifdef play_music
	call(SIDFILE_1_PLAY);
@endif
	// Set original config
	poke(^$01, 0, currentConfig);
	CloseIRQ();

end;

/*
  Empty break interrupt
*/
interrupt NMI();
begin

end;


/*
	The main loop updater: runs through all 

*/
procedure UpdateMainloop();
begin
	while (1<2) do begin
		if initComplete=0 then begin
			// Make sure that everything is black
			SPRITE_BITMASK:=0;
			screenoff();

			if (nextScene=@scene1) then 
				InitScene1();

			screenon();
			initComplete:=1;
		end;

	end;

end;

/*
	Main routine
*/
begin
	// Disable all interrupts
	PreventIRQ();
	DisableCIAInterrupts();
	// Empty NMI irq
	nmiirq(NMI());
	// Set current memory config
	SetMemoryConfig(1,@useKernal,0);
	// Make sure we keep that config stored 
	keep01:=peek(^$01,0);
	currentPart := 0;
	nextScene:=timeStamps[currentPart*4];

	initsid(SIDFILE_1_INIT);
	initComplete:=0;
	RasterIRQ(RasterWaiter(),0,@useKernal);

	EnableRasterIRQ();
	enableirq();
	UpdateMainloop();
end.
