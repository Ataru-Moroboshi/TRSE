unit CustomUnit;
// Unit file for example 12!

var
	// Variables here will be accessible by any .ras file that uses it
	number : integer = 10000;
	x, y, a, b,value, color, screen  : byte; // some global variables with shared use in various procedure declarations
	zp : pointer; // Internal pointer
	i, j, k, c : byte; // varaibles used internally 
	// Some random constant definition
	// Constants keep their original name 
	const SomeUnitConstant : byte = 50;
	
/* 	

We define x, y, a, and b as being global variables. This way, these variables 
can be reused as later procedure parameters. Just make sure that the procedures don't call
each other nested.

*/

@userdata $A000 $B000 "CUSTOM UNIT"

@donotremove "Kake"

@ignoremethod init8x8div
@ignoremethod init8x8div
@ignoremethod init16x8div
@ignoremethod initeightbitmul
@ignoremethod init16x8mul

procedure Kake();
begin

end;


procedure DrawBox(x, y, a, b, value, color, screen : global byte);
begin
	// zp points to color ram
	zp:=$D800 + x + y*screen_width;
	// point to screen
	moveto(x,y, screen);
	for i:=0 to a do
	begin
		for j:=0 to b do
		begin
			screenmemory[j]:=value;
			zp[j]:=color;
		end;
		zp:=zp + screen_width;
		screenmemory:=screenmemory + screen_width;
	end;
end;

procedure DrawTri(x, y, a, value, color, screen : global byte);
begin
	// zp points to color ram
	zp:=$D800 + x + y*screen_width;
	// point to screen
	moveto(x,y, screen);
	c := a;
	k:=1;
	for i:=0 to a do
	begin
		for j:=c-k to c+k-1 do
		begin
			screenmemory[j]:=value;
			zp[j]:=color;
		end;
		zp:=zp + screen_width;
		screenmemory:=screenmemory + screen_width;
		if (k<c) then inc(k);
	end;
end;


end.


