Unit crtc;
var 
	ga,gb,col,pix,x,y : byte; 
	pa : pointer;
	
	@donotremove y_lookup
	y_lookup : array[201] of integer = buildTable( "0xC000 + (Math.floor(i/8))*80 + (i&7)*2048");
	// Lookup for mode 0 pixel 0	
	pixtab1 : array[16] of byte=(
%00000000,
%10000000,
%00001000,
%10001000,
%00100000,
%10100000,
%00101000,
%10101000,

%00000010,
%10000010,
%00001010,
%10001010,
%00100010,
%10100010,
%00101010,
%10101010);

	// Lookup for mode 0 pixel 1	
	pixtab2 : array[16] of byte=(
%00000000,
%01000000,
%00000100,
%01000100,
%00010000,
%01010000,
%00010100,
%01010100,

%00000001,
%01000001,
%00000101,
%01000101,
%00010001,
%01010001,
%00010101,
%01010101);


// Set screen mode
procedure SetMode(ga: global byte);
begin
	asm("
    ld  a,[crtc_ga]
    call  $BC0E
	");
end;

procedure SetPalette(pa : global pointer);
begin
	for ga:=0 to 16 do
	begin
	gb:=pa[ga];
	asm("
	ld a,[crtc_gb]
    ld c, a     
    ld b, a    
    ld a, [crtc_ga]
    call #$BC32 ; set palette
    ");
    end;
end;

procedure SetSinglePalette(ga,gb : global byte);
begin
	asm("
	ld a,[crtc_gb]
    ld c, a     
    ld b, a    
    ld a, [crtc_ga]
    call #$BC32 ; set palette
    ");
end;


procedure SetBorder(ga: global byte);
begin
	asm("
    ld a,[crtc_ga]
    ld b,a
    ld c, b
    call $BC38
	");
end;


// Set screen width to 256 pixels
procedure SetWidth256();
begin

	asm("
	
	; ChibiAkumas' set screen width

	; send the CRTC (CRT Chip) values
	ld hl,crtc_256widthList
	ld bc,&bc00

set_crtc_vals:
	out (c),c	;choose register
	inc b
	ld a,(hl)
	out (c),a	; send the new value
	dec b
	inc hl
	inc c
	ld a,c
	cp 14		; update 14 registers
	jr nz,set_crtc_vals

	ret


crtc_256widthList:

	defb $3f	; R0  - horizontal total
	defb 32		; R1  - horizontal displayed (32 chars wide)
	defb 42		; R2  - Horizontal sync position (centralises screen)
	defb $86	; R3  - Horizontal and Vertical sync widths
	defb 38		; R4  - Vertical total
	defb 0		; R5  - Vertical adjust
	defb 24		; R6  - Vertical displayed (24 chars tall)
	defb 31		; R7  - Vertical sync position (centralises screen)
	defb 0		; R8  - Interlace
	defb 7		; R9  - Max Raster
	defb 0		; R10 - Cusror (not used)
	defb 0		; R11 - Cursor (not used)
	defb $30	; R12 - screen start (at &c000)
	defb $00	; R13 - screen start

	");
end;





procedure PutPixelMode0(x,y,col : global byte);
begin
	// Simply looks up the y-value and adds x
	asm("
		ld hl,crtc_y_lookup
		ld b,0
		ld a,[crtc_y]
		ld c,a
		add hl,bc
		add hl,bc

		
		ld a,[hl]
		ld [crtc_pa+1],a
		inc hl
		ld a,[hl]
		ld [crtc_pa],a
		
		
	");
//	pix :=x &1;
	pa:=pa+x>>1;
	
    ga := pa[0];
    
	if (x&1=0) then
		ga := ga & 85 + pixtab1[col]
  	else
		ga := ga & 170 + pixtab2[col];

	 pa[0]:=ga;

end;




end.
