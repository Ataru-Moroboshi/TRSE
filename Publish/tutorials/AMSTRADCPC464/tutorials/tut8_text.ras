program Text;
@use "crtc"
@use "input"
@use "text"

var
  hw_i: byte=0;
  bo: byte;
  joy1: byte;
  joy2: byte;
  ch: byte;
  matrix: array[8] of byte;
  message: string = ("Print a pointer");

begin
  // Set 160x200 16-color mode
  crtc::SetMode(0);
  // Set black border
  crtc::SetBorder(0);

  // Write digits from 0 to 10
  for hw_i := 48 to 58 do text::PutChar(hw_i);
  input::WaitKey();

  // Print with immediate value
  text::MoveCursorTo(3, 3);
  text::Print("Print a string\r\n");
  input::WaitKey();

  // Print with a string variable
  text::Print(#message);
  input::WaitKey();

  // Ring the bell
  text::MoveCursorTo(1, 5);
  text::Print("Hear the bell ");
  text::PutChar(7);
  input::WaitKey();
  text::MoveCursorTo(1, 6);
  text::Print("See the bell ");
  text::PutControlChar(7);
  input::WaitKey();

  // Redefine a char in the default allowed user-definable char
  matrix[0] := 1;
  matrix[1] := 3;
  matrix[2] := 7;
  matrix[3] := 15;
  matrix[4] := 31;
  matrix[5] := 63;
  matrix[6] := 127;
  matrix[7] := 255;

  text::SetCharMatrix(250, #matrix);
  text::PutChar(250);

  // Redefine a char not in the default allowed user-definable char
  matrix[0] := 255;
  matrix[1] := 0;
  matrix[2] := 255;
  matrix[3] := 0;
  matrix[4] := 255;
  matrix[5] := 0;
  matrix[6] := 255;
  matrix[7] := 0;

  // Redefine the 'l' to horizontal lines
  text::SetCharMatrix(108, #matrix);
  text::PutChar(108);

  // Reprint Hello, world with the modified 'l' char
  text::MoveCursorTo(1, 7);
  text::Print("Hello, world!\r\n");
  input::WaitKey();

  // Copy 'Hw' from line 5 to line 10
  text::MoveCursorTo(1, 7);
  ch := text::GetChar();
  text::MoveCursorTo(1, 10);
  text::PutChar(ch);

  // Enable cursor
  text::EnableCursor(1);
  input::WaitKey();


  text::MoveCursorTo(8, 7);
  ch := text::GetChar();
  text::MoveCursorTo(2, 10);
  text::PutChar(ch);
   input::WaitKey();

  // Disable cursor
  text::EnableCursor(0);
  input::WaitKey();

  // One more time with colors
  text::MoveCursorTo(1, 11);
  text::Print("GetPen: ");
  text::PutChar(text::GetPen()+48);
   text::MoveCursorTo(1, 12);
  text::Print("GetPaper: ");
  text::PutChar(text::GetPaper()+48);    
   text::MoveCursorTo(1, 13);
  text::SetPen(3);
  text::Print("SetPen 3\r\n");
  text::SetPaper(2);
  text::Print("SetPaper 2\r\n");
  text::MoveCursorTo(1, 15);
  text::Print("GetPen: ");
  text::PutChar(text::GetPen()+48);
  text::MoveCursorTo(1, 16);
  text::Print("GetPaper: ");
  text::PutChar(text::GetPaper()+48);    
  input::WaitKey();

  // Swap colors
  text::SwapPenPaper();
  text::MoveCursorTo(1, 17);
  text::Print("Swap pen and paper");
  input::WaitKey();
  text::SwapPenPaper();

  // Transparent/opaque background
  text::MoveCursorTo(1, 18);
  text::Print("Background");
  text::MoveCursorTo(1, 18);
  text::SetTransparent(1);
  text::SetPen(5);
  text::Print("transparent");
  input::WaitKey();
  text::MoveCursorTo(1, 18);
  text::SetTransparent(0);
  text::Print("opaque");
  input::WaitKey();

  // We have both kinds of reset
  text::Reset(0);
  text::Print("Print after soft reset");
  input::WaitKey();
  text::Reset(1);
  text::Print("Print after hard reset");
  input::WaitKey();

  // Window
  for hw_i := 0 to 8 do 
  begin
    text::SelectWindow(hw_i);
    text::SetWindow(hw_i, 3*hw_i, 8+hw_i, 3*hw_i+2);
    text::SetPaper(hw_i);
    text::SetPen(hw_i+8);        
    text::ClearWindow();
    text::Print("Window #");
  end;
  input::WaitKey();

  for hw_i := 0 to 8 do 
  begin
    text::SelectWindow(hw_i);
    text::MoveCursorTo(9, 1);
    text::PutChar(48+hw_i);
  end;   
  input::WaitKey();
end.
