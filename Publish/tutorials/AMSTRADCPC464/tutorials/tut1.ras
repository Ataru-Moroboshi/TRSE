program Tutorial1;
@use "crtc"
@use "input"

@export "resources/images/image1.flf" "resources/images/image1.bin" 256

var  
	done,i1,j: byte; 
	test : byte;
	k1 : byte=0;
	t,k,la,time : byte=0;
	p1,p2:pointer;	
	image : incbin("resources/images/image1.bin");
	palette : incbin("resources/images/image1_palette.bin");

procedure FillScreen( fs_j: byte );
begin
	
	for j:=0 to 1 do
	begin
			
		fill( p1, k1, 80 );
//		p1[0]:=time;
		k1 := k1 + 3;

		p1 := p1 + 80;
//		k1:=k1+11;
	//	p1:=p1+160;
	
	end;

end;	

/*

void PutPixelMode0(unsigned char nX, unsigned char nY, unsigned char nColor)
{
  unsigned char nPixel = 0;
  unsigned int nAddress = 0xC000 + ((nY / 8) * 80) + ((nY % 8) * 2048) + (nX / 2);
  nPixel = nX % 2;

  SetMode0PixelColor((unsigned char *)nAddress, nColor, nPixel);
}



*/


procedure SetPalette();
begin
	for i1:=0 to 16 do
	begin
	j:=palette[i1];
	asm("
    ld a, [j]
    ld c, a     
    ld b, a    
    ld a, [i1]
    call #$BC32 ;SCR SET INK
    ");
    end;
end;


begin

	time:=0;
	
	crtc::SetMode(0);
	SetPalette();
//	crtc::SetWidth256();
	time:=1;
	p1 := $C000;
//	k1 := fs_j;
	p1:=image;
	p2:=$C000;
	for j:=0 to 1 do
	begin
	for i1:=0 to 25 do
	begin
		for k:=0 to 80 do
		begin
			p2[k]:=%11001100;
		end;
		p1:=p1+80;
		p2:=p2+80;
	end;
		p1:=p1+$30;
		p2:=p2+$30;
	
	end;
	
	memcpy(image, ^$C000, $4000);
	while (done=0) do
	begin
	
		//input::GetJoy();
// this produces the AND error: if (input::joy & JOYUP) then
		// In caprice, press F7 to enable joykey and Z is fire 1
//		if (input::joy = JOYFIRE1) then
			//FillScreen( time );
			
//		if (input::joy & JOYUP) then
			FillScreen( time );
			
		time:=time+1;
		for i1:=0 to 100 do
		begin
			for j:=0 to 100 do
			begin
			for k:=0 to 2 do
			begin
			
			end;
			
			end;
		end;
	
	end;	

end.
