program tut1;
var
  
   i1,i2, i3 : byte wram;

	spriteData : array[] of byte = (
   	$003,$00F,$01F,$03F,$07F,$07F,$0FF,$0FF,
    $0FF,$0FF,$07F,$07F,$03F,$01F,$00F,$003,
    $0C0,$0F0,$0F8,$0FC,$0FE,$0FE,$0FF,$0FF,
    $0FF,$0FF,0$FE,$0FE,0$FC,$0F8,$0F0,$0C0,
    000,000,000,000,000,000,000,000,
    000,000,000,000,000,000,255,255,
    000,000,000,000,000,000,000,000,
    000,000,000,000,000,000,255,255,0);


	charData : array[] of byte = (
    000,000,000,000,000,000,000,000, //; 0  blank
    124,198,198,198,198,198,124,000, // ; 1  '0'
	024,056,120,024,024,024,024,000, // ; 2  '1'
    124,198,006,004,024,096,254,000, // ; 3  '2'
	124,198,006,060,006,198,124,000, // ; 4  '3'
    024,056,088,152,254,024,024,000, // ; 5  '4'
	254,192,192,252,006,198,124,000, // ; 6  '5'
    124,198,192,252,198,198,124,000, // ; 7  '6'
	254,006,012,012,024,024,024,000, // ; 8  '7'
    124,198,198,124,198,198,124,000, // ; 9  '8'
	124,198,198,126,006,198,124,000, // ; 10 '9'
    056,108,198,198,254,198,198,000, // ; 11 'A'
	252,198,198,252,198,198,252,000, // ; 12 'B'
    124,230,192,192,192,230,124,000, // ; 13 'C'
	252,206,198,198,198,206,252,000, // ; 14 'D'
    254,192,192,248,192,192,254,000, // ; 15 'E'
	254,192,192,248,192,192,192,000, // ; 16 'F'
    124,198,192,192,206,198,124,000, // ; 17 'G'
	198,198,198,254,198,198,198,000, // ; 18 'H'
    254,056,056,056,056,056,254,000, // ; 19 'I'
	126,024,024,024,024,216,248,000, // ; 20 'J'
    198,204,216,240,248,204,198,000, // ; 21 'K'
	192,192,192,192,192,192,254,000, // ; 22 'L'
    130,198,238,254,214,198,198,000, // ; 23 'M'
	134,198,230,214,206,198,194,000, // ; 24 'N'
    124,238,198,198,198,238,124,000, // ; 25 'O'
	252,198,198,252,192,192,192,000, // ; 26 'P'
    124,198,198,198,214,206,124,000, // ; 27 'Q'
	252,198,198,252,248,204,198,000, // ; 28 'R'
    124,198,192,124,006,198,124,000, // ; 29 'S'
	254,056,056,056,056,056,056,000, // ; 30 'T'
    198,198,198,198,198,238,124,000, // ; 31 'U'
	198,198,198,238,108,108,056,000, // ; 32 'V'
    198,198,214,254,124,108,040,000, // ; 33 'X'
	198,238,124,056,124,238,198,000, // ; 34 'Y'
    198,238,124,056,056,056,056,000,0); // ; 35 'Z'


@donotremove SetWrite
procedure SetWrite();
begin
	asm("
	DI
    LD A,L
    OUT (CTRL_PORT),A
    LD A,H
    AND 3Fh
    OR 40h
    OUT (CTRL_PORT),A
    EI
    RET
;");
end;



procedure FillVRAM(ptr:pointer; fv_val:byte; count : integer);
begin
//	SetWrite();
		
	asm("
	ld a,[ptr]
	ld h,a
	ld a,[ptr+1]
	ld l,a

	call SetWrite
	
	ld a,[count]
	ld b,a
	ld a,[count+1]
	ld c,a

	ld a,[fv_val]

;	LD bc,768
FLOOP:
    LD A,E
    OUT (DATA_PORT),A
    DEC BC
    LD A,C
    OR B
    CP 0
    JR NZ,FLOOP
    RET

	");

end;


//@donotremove CopyToVRAM
procedure CopyToVRAM(cr_from, cr_to: pointer wram; cr_length:integer);
begin
	//SetWrite();
	asm("
	
	ld a,[cr_to]
	ld h,a
	ld a,[cr_to+1]
	ld l,a

	call SetWrite

	ld a,[cr_from]
	ld d,a
	ld a,[cr_from+1]
	ld e,a

	ld a,[cr_length]
	ld b,a
	ld a,[cr_length+1]
	ld c,a
LLOOP:
    LD A,(DE)
    OUT (DATA_PORT),A
    INC DE
    DEC BC
    LD A,C
    OR B
    CP 0
    JR NZ,LLOOP
    RET

	");
end;

   
@donotremove NMI
procedure NMI();
begin
	asm("	RETN ");

end;

begin
//	CopyToVRAM(spriteData, VRAM_SPRGEN,32*2);
	FillVRAM(VRAM_COLOR,55,$1800);
	CopyToVRAM(charData, VRAM_PATTERN,	36*8);
	for i1:=0 to 200 do
	begin
		FillVRAM(VRAM_NAME,4,200);
	end;
	Loop();
end.
