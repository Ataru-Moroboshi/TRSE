

procedure RenderTriangles();
var 
	v1,v2,v3 : byte;
	ax,ay,bx,by,cx,cy : byte;
	

verts : array[] of byte = (
155,  46,
 66, 152,
157,  52,
193, 223,
218, 107,
133, 188,
140, 197,
 45, 102,
 55, 206,
131, 131,
 42, 119,
119, 122,
219,  35,
149,  37,
 44, 223,
171, 129,
125,  49,
 89,  70,
140, 157,
226, 193,
113,  62,
141,  64,
162, 137,
 81, 193,
111,  84,
186,  58,
182, 132,
155, 214,
 38,  56,
209, 213,
 58,  29,
205, 214,
185,  67,
196,  39,
115, 137,
 68, 129,
 85,  51,
105, 175,
 40,  95,
223, 132,
);
faces : array[] of byte = (
 39,  12,  19,
 11,  21,   9,
 14,  27,   3,
 23,  27,  14,
 22,  18,   9,
 34,  11,   9,
 18,  34,   9,
 34,  18,  37,
 12,  13,  30,
 23,   1,  37,
  1,  34,  37,
 29,  31,  19,
 31,  29,   3,
 27,  31,   3,
 18,   5,  37,
  5,  23,  37,
 26,  39,  19,
 31,  26,  19,
 26,  31,  22,
  4,  12,  39,
  4,  32,  12,
 26,   4,  39,
  4,  26,  32,
 33,  13,  12,
  2,  32,  21,
 30,  36,  28,
 36,  17,  28,
 24,  21,  11,
  8,  23,  14,
  8,   1,  23,
 34,  35,  11,
  1,  35,  34,
 35,  24,  11,
 24,  35,  17,
  6,   5,  18,
  6,  31,  27,
  6,  27,  23,
  5,   6,  23,
  6,  18,  22,
 31,   6,  22,
 15,  26,  22,
 26,  15,  32,
 32,  15,  21,
 15,  22,   9,
 21,  15,   9,
 13,   0,  21,
  0,   2,  21,
 33,   0,  13,
  2,  25,  32,
 32,  25,  12,
 25,  33,  12,
 25,   0,  33,
  0,  25,   2,
 16,  13,  21,
 13,  16,  30,
 16,  36,  30,
 35,   7,  17,
 20,  24,  17,
 36,  20,  17,
 16,  20,  36,
 24,  20,  21,
 20,  16,  21,
 17,  38,  28,
  7,  38,  17,
 38,  14,  28,
 10,  35,   1,
 10,   7,  35,
  8,  10,   1,
 10,  38,   7,
 10,   8,  14,
 38,  10,  14,
);
 N : byte =   71;
 

begin

	k:=0;
	t:=time*4;
	l:=0;
	for i:=0 to N do 
	begin
		v1:=faces[k]*2;
		v2:=faces[k+1]*2;
		v3:=faces[k+2]*2;


		ax:=div8[v1*4+t];
		ay:=div8[v1*4+t+64];
		bx:=div8[v2*4+t];
		by:=div8[v2*4+t+64];
		cx:=div8[v3*4+t];
		cy:=div8[v3*4+t+64];
		

		l:=l+64;
		m:=(sine[ay*8+t]/8)+16;
		drawpoly(verts[v1]+ax,verts[v1+1]+ay,verts[v2]+bx,verts[v2+1]+by, verts[v3]+cx,verts[v3+1]+cy, l+m);

		k:=k+3;
	end;

end;

procedure SetupPaletteEffect4();
var 
   i,k: byte;
begin
	j:=0;
	for i:=0 to 64 do begin
		setpalette(i,j,j/3,j/2);
		setpalette(i+64,j/4,j/2,j);
		setpalette(i+128,j/2,j/8,j);
		setpalette(i+192,j,j/2,j/8);
		j:=j+4;
	end;
end;


procedure RenderEffect4Balls(shift,y:byte);
begin
	t:=time*2+shift;
	j:=time+shift;
	for i:=0 to @noBalls2 do
	begin
		k:=16 + sine[j+t]/6;
		DrawCircleFilled(balls_x[i], y, k, 0);		
		DrawCircleFilled(balls_x[i], y, k/2, 8);		
		j:=j+111;
	end;

end;

procedure MoveBalls();
begin
	for i:=0 to @noBalls2 do 
		balls_x[i]:=balls_x[i]-1;


end;

procedure SetupEffect4Stuff();
begin
	okvc_border_height:=129;
	okvc_border_color := 0;
	for i:=0 to 0 do div8[i]:=sine[i]/24;

	for i:=0 to @noBalls2 do
	begin
		balls_x[i]:=i*32 + 16;
	end;
	tp:=#textE3;
	scroll:=0;
end;


procedure RenderE4Text();

begin
	yp:=sine[time]/4+90;
	DrawRect(0,yp,255,12,0);
	DrawRect(0,yp+1,255,10,31);
	j:=16-scroll;
	for i:=0 to 30 do
	begin
		k:=tp[i];
//		printchar(k,63+64,j,yp+2);
		printchar(k,0,j,yp+2);
		j:=j+8;
		
	end;
	scroll:=scroll+2;
	if scroll=8 then
	begin
		scroll:=0;
		tp:=tp+1;
	end;
	

end;

procedure Effect4Trans();
begin
	if (transition=0) then
	begin
		i:=okvc_border_height;
		if (i>16) then 
		begin
			i:=i-sine[i+200]/64;
			okvc_border_height := i;
		end;	
	end;
	if (transition=1) then
	begin
		i:=okvc_border_width;
		
		if (i<=128) then
		  i:=i+2;
		  
		okvc_border_width:=i;

	end;
end;


procedure Effect4();
begin
//	setdefaultpalette();
	SetupEffect4Stuff();
	SetupPaletteEffect4();
	clearscreen(0);
	while (isDone=false) do
	begin
		Effect4Trans();
		clearscreen(0);
		call(sidfile_1_play);
		RenderTriangles();
		RenderEffect4Balls(0,40);
		RenderEffect4Balls(64,-40);
				
		RenderE4Text();

		AdvanceEffect();
		MoveBalls();
		waitforvsync();
	end;

end;