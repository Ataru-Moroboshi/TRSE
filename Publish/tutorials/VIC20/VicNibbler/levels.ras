

procedure DrawLevelFrame();
begin

	// draw top and bottom horizontal borders
	p1 := $1e4c; //AddressTable( scrm, 0, 4 );	
	p2 := $1fa2; //AddressTable( scrm, 0, 22 );	//2+ + 19(play area)
	fori i := 1 to 17 do
	begin
		p1[i] := 18;
		p2[i] := 18;
	end;

	// draw corners
	p1[0] := 20;
	p1[18] := 21;
	p2[0] := 22;
	p2[18] := 23;

	// draw left/right vertical borders
	p1 := p1 + @SCREEN_WIDTH;
	fori i := 1 to 17 do
	begin
		p1[0] := 19;
		p1[18] := 19;
		p1 := p1 + @SCREEN_WIDTH; 
	end;
	
	// set colour
	p1 := $964c; //AddressTable( clrm, 0, 4 );
	fori t:=0 to 18 do
	begin
		fori i:=0 to 18 do
		begin
			p1[i] := colourarray[ levelId ];
		end;
		p1 := p1 + @SCREEN_WIDTH;
	end;

end;

procedure RenderMazeShapes(); // forward declare
// Draw maze
procedure DrawLevelMaze( );
var
	// storing levels in this procedure - remember, this is just memory locations and TRSE treats it as a global variable
	// because there are no use of local variables in the ASM which would use up valuable memory

	// NEW FORMAT:  17 rows for first 8 bits (mirrored to right of screen
	// then three bytes containing 16 bits for the middle tiles in the maze 
	// (but not row 17 as the snake starts there and this will always be empty) 
	// TOTAL = 19 bytes 
	
	// FRUIT - 8 bits, mirrored bits 7-1 = normal maze locations
	// bit 0, instead of the 8th column in maze is moved to 9th (middle) column
	// this is so that we can stick to 8 bits (1 byte) and arcade game never seems to
	// put fruit in columns 8 (or 10 mirrored) so maybe they did the same :)
	level0 : array[] of byte = (
		%00000000, %01110101, %01010100, %01110101, %00000101, %01111101, %01000000,
		%01011111, %00000000, %01111101, %00000001, %01110101, %01010100, %01110101,
		%00000101, %01111101, %00000000,
		%01000000,%01010101  // middle column (last row is where snake starts so always blank)
	);
	level1 : array[] of byte = (
		%00000000, %01111101, %00000001, %01110111, %01010000, %01110111, %00000000, 
		%11011111, %00000000, %01111111, %00000001, %01111101, %00000100, %01010101, 
		%01010001, %01011111, %00000000, %00000100, %00000000  // middle column (last row is where snake starts so always blank)
	);
	level2 : array[] of byte = (
		%00000000, %01010101, %00000000, %01010101, %00000000, %01010101, %00000000, 
		%01010101, %00000000, %01010101, %00000000, %01010101, %00000000, %01010101, 
		%00000000, %01010101, %00000000, %00000000, %00000000  // middle column
	);
	level3 : array[] of byte = (
		%00000000, %01110101, %00000100, %01110101, %01000000, %01011101, %00010001, 
		%01010101, %00000100, %01010101, %00010001, %01011101, %01000000, %01110101, 
		%00000100, %01110101, %00000000, %01010101, %01010101 // middle column
	);
	level4 : array[] of byte = (
		%00000000, %01011101, %00010001, %01110101, %00000101, %01110101, %01000001, 
		%01011111, %00000000, %01011111, %01000001, %01110101, %00000101, %01110101, 
		%00010001, %01011101, %00000000, %00000000, %00000000  // middle column
	);
	level5 : array[] of byte = (
		%00000000, %01111101, %00000000, %01111101, %01000101, %01111101, %00000000, 
		%11011111, %00000000, %01110101, %00000101, %01110101, %01010100, %01110101, 
		%00000101, %01111101, %00000000, %01010100, %00000101  // middle column (last row is where snake starts so always blank)
	);
	level6 : array[] of byte = (
		%00000000, %01111101, %00000001, %01110111, %01010000, %01110111, %00000000, 
		%11111111, %00000000, %01111111, %00000001, %01111101, %00000100, %01110101, 
		%01010001, %01110111, %00000000, %00000100, %00000000  // middle column (last row is where snake starts so always blank)
	);
	level7 : array[] of byte = (
		%00000000, %01010101, %00000100, %01010101, %00000000, %11010101, %00000000, 
		%01110111, %00000000, %01010101, %00000000, %01010101, %00010000, %01010101, 
		%00000000, %01010101, %00010000, %00010000, %00000100  // middle column
	);
	level8 : array[] of byte = (
		%00000100, %01110101, %00000100, %01110101, %01000000, %01011101, %00010000, 
		%01010111, %00000101, %01010111, %00010000, %01011101, %01000000, %01110101, 
		%00000100, %01110101, %00000000, %01010000, %00000101 // middle column
	);
	level9 : array[] of byte = (
		%00000000, %01010101, %00010001, %01110101, %00000101, %01110101, %01000100, 
		%01011111, %00000000, %01011111, %01000100, %01110101, %00000000, %01110111, 
		%00010101, %01010111, %00000000, %00000000, %00000000  // middle column
	);
	level10 : array[] of byte = (
		%00000000, %01111011, %00001010, %01100010, %00001010, %01111011, %00000000, 
		%11111011, %00000000, %01111111, %00000000, %11111111, %00000000, %01101011, 
		%00001000, %01111011, %00000000, %00010001, %01000100  // middle column
	);
	level11 : array[] of byte = (
		%00000000, %01110111, %01010101, %01110111, %00000000, %11011101, %01010101, 
		%11011101, %00000000, %01011110, %01010000, %01010111, %01010000, %01011010, 
		%01000000, %01110111, %00000000, %00000101, %11101111  // middle column
	);
	level12 : array[] of byte = (
		%00001000, %01101011, %01000001, %00011100, %11010101, %00011100, %01000001, 
		%01101011, %00001000, %01101011, %01000001, %00011100, %11010101, %00011100, 
		%01000001, %01101011, %00000000, %00001000, %00001000  // middle column
	);	
	level13 : array[] of byte = (
		%00000000, %01010101, %00000000, %01010101, %00000000, %11110111, %00000000, 
		%01010101, %01000101, %01010101, %01000100, %01010101, %01000101, %01010101, 
		%01000100, %01010111, %00000000, %00000101, %01010101  // middle column
	);
	level14 : array[] of byte = (
		%00000000, %01110111, %01000001, %01011101, %01010101, %01011101, %01000001, 
		%01110111, %00000000, %11110111, %00000000, %01101011, %00001001, %01011101, 
		%01000001, %01110111, %00000000, %00000000, %01000000  // middle column
	);
	level15 : array[] of byte = (
		%00000000, %01010101, %00010101, %01010101, %00010001, %01010101, %00010101, 
		%01010101, %00000101, %01010101, %00010101, %01010101, %00010001, %01110101, 
		%00000101, %01111101, %00000000, %00000000, %00000000  // middle column
	);
	level16 : array[] of byte = (
		%00000001, %01111101, %00000000, %01111101, %01000001, %01011111, %01010000, 
		%01000111, %01010100, %01010001, %01010101, %01000101, %01110100, %00000111, 
		%01010001, %01011101, %00000000, %01010101, %01010101  // middle column
	);
	level17 : array[] of byte = (
		%00000000, %01110101, %00000000, %01011111, %00010000, %01010101, %00000000, 
		%01111101, %00000001, %01010101, %00010000, %01011111, %00000000, %01010101, 
		%00000001, %01110101, %00000000, %00000000, %00000000  // middle column
	);
	level18 : array[] of byte = (
		%00000000, %01110111, %00010000, %11011111, %01000100, %11110101, %00000100, 
		%01110101, %00000101, %01110100, %00000111, %01110100, %01010101, %01110101, 
		%00000101, %01111101, %00000000, %01010100, %00000000  // middle column
	);
	level19 : array[] of byte = (
		%00000000, %01111111, %01000000, %01011111, %01010001, %01010101, %01010101, 
		%01010100, %01010111, %01010100, %01010101, %01010101, %01010001, %01011111, 
		%01000000, %01111111, %00000000, %00000000, %10000000  // middle column
	);
		

begin

	// plot level pieces
	p1 := #level0;// + (levelNo * 19);
	r := levelarray[ levelId ];
	if r <> 0 then
		fori i:=1 to r do
			p1 := p1 + 19;
	p2 := $1e5f;//AddressTable( scrm, 0, 5 );

	fori i := 1 to 17 do
	begin
		// columns
		fori t :=1 to 8 do
		begin
			if getbit(p1[0],8-t)=1 then 
			begin
				p2[t] := 28;
				p2[18-t] := 28;
			end;
		end;
		p2 := p2 + @SCREEN_WIDTH; // move down to next row
		p1 := p1 + 1;
	end;
	
	// middle bit
	p2 := $1e5f;//AddressTable( scrm, 0, 5 );
	fori t := 1 to 2 do
	begin
		fori i := 1 to 8 do
		begin
			if getbit(p1[0],8-i)=1 then p2[9] := 28;

			p2 := p2 + @SCREEN_WIDTH;
		end;
		p1 := p1 + 1;
	end;	

	RenderMazeShapes();
	
end;

// plot the food for the level
procedure DrawLevelFood();
var
	foodLevel0 : array[] of byte = (
		%00100010, %00000000, %10001000, %00000000,	%00000010, %00000000, %10010000,
		%00000001, %00010000, %00000000, %00100000,	%00000000, %00000001,%10001010,
		%00000000, %10000000, %00000000
	);
	foodLevel1 : array[] of byte = (
		%00100010, %00000000, %10001000, %00000000, %00000010, %00000000, %10010000, 
		%00000001, %00010000, %00000000, %00100000, %00000000, %00000001, %00001010, 
		%10000000, %10000000, %00000000
	);
	foodLevel2 : array[] of byte = (
		%00100010, %00000000, %10001000, %00000000, %00000010, %00000000, %10010000, 
		%00000001, %00010000, %00000000, %00100000, %00000000, %00000001, %10001010, 
		%10000000, %00000000, %00000000
	);
	foodLevel3 : array[] of byte = (
		%00100001, %00000010, %00100001, %00000000, %10100001, %00000010, %00000000, 
		%00000000, %00001001, %00000000, %00000000, %00000010, %10000001, %00001000, 
		%00100001, %00000000, %00000000
	);
	foodLevel4 : array[] of byte = (
		%00000000, %00000000, %00101000, %10000001, %00001000, %00000000, %00100010, 
		%00000000, %00010001, %00000000, %00100010, %00000000, %00001000, %10000001, 
		%00101000, %00000000, %00000000
	);
	foodLevel5 : array[] of byte = (
		%10000000, %00000000, %00010000, %00000100, %00010000, %00000000, %00000000, 
		%00000100, %00010000, %00000000, %00010000, %00000001, %00000000, %00000100, 
		%00010010, %00000100, %10000000
	);
	foodLevel6 : array[] of byte = (
		%00100010, %00000000, %10001001, %00000000, %00100010, %00000000, %00000000, 
		%00000000, %10100010, %00000000, %00001010, %00100000, %00001010, %00000000, 
		%00100010, %00000000, %10000000
	);
	foodLevel7 : array[] of byte = (
		%10000000, %00000000, %00101010, %00000001, %00000000, %00000001, %00101010, 
		%00000000, %10000000, %00000000, %00100010, %00000001, %00100010, %00000001, 
		%00100010, %00000000, %10000000
	);
	foodLevel8 : array[] of byte = (
		%10000001, %00101000, %10000010, %00101000, %10000001, %00000000, %00000011, 
		%00000000, %10010000, %10000000, %00000011, %00100000, %00000000, %10001000, 
		%10010011, %00000000, %00000000
	);


begin

	numFood := 0;
	
	p1 := #foodLevel0;// + (levelNo * 17);
	r := foodarray[ levelId ];
	if r <> 0 then
		fori i:=1 to r do
			p1 := p1 + 17;
	p2 := $1e5f;//AddressTable( scrm, 0, 5 );
	p3 := $965f;//AddressTable( clrm, 0, 5 );

	fori i := 1 to 17 do
	begin
		// columns
		fori t :=1 to 7 do
		begin
			if getbit(p1[0],8-t)=1 then 
			begin
				p2[t] := @FOOD;
				p2[18-t] := @FOOD;
				p3[t] := BLUE;
				p3[18-t] := BLUE;
				numFood := numFood + 2;
			end;
		end;
		if p1[0] & 1 = 1 then begin
			p2[9] := @FOOD;
			p3[9] := BLUE;
			numFood := numFood + 1;
		end;

		p3 := p3 + @SCREEN_WIDTH;
		p2 := p2 + @SCREEN_WIDTH; // move down to next row
		p1 := p1 + 1;
	end;

end;

// connect maze blips into the graphic shapes
procedure RenderMazeShapes();
var
	// Offset calculated from: 1= top, 2= left, 4= right, 8= bottom
	mazeTranslate: array[] of byte = (28,32,30,23,29,22,18,25,31,19,21,27,20,26,24,0);
	
begin

	p1 := $1e4c;//AddressTable( scrm, 0, 4 );
	// rows
	fori t := 1 to 17 do
	begin
		// columns
		fori i := 1 to 17 do
			begin
			r := 0;
			s := i+19;
			if p1[s] = 28 then
			begin
				if p1[i] <> 0 then inc(r); // top
				if p1[i+18] <> 0 then r := r + 2; // left
				if p1[i+20] <> 0 then r := r + 4; // right
				if p1[i+38] <> 0 then r := r + 8; // bottom
				p1[s] := mazeTranslate[r];
				// connect borders if needed
				if i=1 then if r<>0 then p1[i+18] := 26;
				if i=17 then if r<>0 then p1[i+20] := 27;
				if t=1 then if r<>0 then p1[i] := 24;
				if t=17 then if r<>0 then p1[i+38] := 25;
			end; 
		end;
		p1 := p1 + @SCREEN_WIDTH;
	end;
		
end;


procedure ColourTime( );
begin
	// change time back to white (changes to red if time out)
	p1 := $9644;//addresstable(clrm,11,3);
	fori i:=0 to 7 do
		p1[i] := timeColor;
end;

// draw the labels for the UI
procedure DrawUITextLabels();
var
	plyrString: string = (33,34,35,36);
	leftString: string = (37,38);
	timeString: string = (39,40,41,42);
	waveString: string = (58,59,60,61);
begin
	screenmemory := $1e00;//addressTable( scrm,0,0 );
	printstring( #plyrString,0,4 );
	screenmemory[10] := 48;
	screenmemory := $1e0e;//screenmemory + 14;
	printstring( #leftString,0,2 );
	screenmemory := $1e45;//screenmemory + 55;
	printstring( #timeString,0,4 );
	screenmemory[6] := 48;
	screenmemory := $1fbb;//addressTable( scrm,6,23 );
	printstring( #waveString,0,4 );
end;

procedure DrawUIBonus();
begin
	timeColor := GREEN;
	ColourTime();
	p1 := $1e44;//addresstable(scrm,11,3);
	t:=0;
	fori i:=43 to 47 do
	begin
		p1[t] := i;
		t:=t+1;
	end;
end;

procedure DrawUIScore();
begin
	screenmemory := $1e05;//addresstable( scrm,5,0);
	printdecimal(score,4);
end;
procedure DrawUILives();
begin
	screenmemory := $1e11;//addresstable( scrm,17,0);
	printdecimal(lives,1);
end;
procedure DrawUITime();
begin
	screenmemory := $1e49;//addresstable( scrm,16,3);
	printdecimal(time,1);
end;
procedure DrawUIWave();
begin
	screenmemory := $1fc0;//addresstable( scrm,11,23);
	printdecimal(wave,1);
end;
