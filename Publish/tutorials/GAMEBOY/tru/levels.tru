Unit Levels;

var
   width, height : byte;
   sizex, sizey : byte;
   startx, starty : byte;
   dataSize, pos : byte;
   i, j, val, idx, k: byte;
   chunksize, chunks : byte;
   is,is2:integer;
/*
   Renders a .flf level at map pos x,y
*/

	lp,sp,mt : pointer; 

	const temp : address = $D000;

procedure ReadHeader();

begin
//	lp := lp +13;

	// Read level header info

	sizex := lp[0];
	sizey := lp[1];

	width := lp[2];
	height := lp[3];

	startx := lp[4];
	starty := lp[5];


	chunks := lp[6];
	chunksize := lp[7];

	dataSize := lp[8];

end;


procedure RenderLevel2x2MetaTiles(m_li2, m_lj2: byte);
var

begin
	// Header is 32 byte long
	// lp should always be reset to level data before this function being called
	lp:=lp+(32);
//	inczp(lp, 32+13);

	pos := sizex*m_lj2 + m_li2;
	// Calculate data size of levels	
	is := width*height;
	// Lookup in level data : position * (map size + extra data size)	
	lp := lp +is*pos;
	lp := lp +dataSize*pos;

	sp:=temp;
	// Fill temp data with chars
	for j:=0 to height  do begin
		idx:=0;
	
		for i:=0 to width   do begin
		
			val := lp[i];
			val:=val*4;
			
			sp[idx]:=mt[val];
			sp[idx+1]:=mt[val+1];
			sp[idx+32]:=mt[val+2];
			sp[idx+33]:=mt[val+3];

			idx:=idx+2;
		 end;
		 sp:=sp+64;
		 lp:=lp+width;
	end;
	lp:=lp+3;

end;


end.