program Test;
var 
	i, j : long;
	k:long;
	t : integer;
	val : long;
	@donotremove s
	s : pointer of integer;
	
	@export "images/image1.flf" "images/image1.bin" 256
	
	image : incbin("images/image1.bin");
	image_pal : incbin("images/image1.pal");
	
procedure SetLoRes();
begin
	asm("
	
                move.w  #0,-(a7)                ; low resolution
                move.l  #-1,-(a7)               ; keep physbase
                move.l  #-1,-(a7)               ; keep logbase
                move.w  #5,-(a7)                ; change screen
                trap    #14
                add.l   #12,a7

	");
end;


begin
	
	SetLoRes();
	memcpy(image_pal,0,palette_start,0,15,2);

	GetScreen(s);
	memcpy(image,0,s,0,8000,4);
	
	// Wait for keypress
	asm("
	  move.w  #7,-(a7)              ; wait for a keypress
      trap    #1                     ; call gemdos
      addq.l  #2,a7                 ; clear up stack
      
	");
	
		t:=0;
	for j:=0 to 200 do
	begin
		k:=0;
		for i:=0 to 40 do
		begin
			
			s[k]:=%0101010100000000;
			k:=k+2;
			s[k]:=$FF73+t;
			k:=k+2;
			s[k]:=$FFFF;
			k:=k+2;
			val:=$FFFF;
			s[k]:=val;
			k:=k+2;
			t:=t+1;
//			s:=s+2;
		end;
		t:=t+256;
		s:=s+160;		
	end; 

	asm("
	  move.w  #7,-(a7)              ; wait for a keypress
      trap    #1                     ; call gemdos
      addq.l  #2,a7                 ; clear up stack
      
	");

end.




