program Tutorial_7_80col;
@use "Screen"
@use "Memory"
var  

@donotremove dummy1
@donotremove dummy2

   	i,j,k, x,dummy1,y,dx,dy, time,xx,add: byte; 
	int : integer;
	zp,zp1,zp2 : pointer;
//	cpLo, cpHi : pointer of long;

	perlin : incbin("data/perlin16.dat");
	charset : incbin("charsets/charset_8x8.bin", $9000);

	music : incsid("music/courier30.sid",2);
	
@define c1pos $4000
@define l1pos $4800


procedure PreCalculate();
begin
	zp1:=@c1pos;
	zp2:=@l1pos;
	xx:=255;
	for y:=0 to 25 do begin
		for x:=0 to 80 do begin
			dx:=abs(40-x);
			dx:=dx/3;
		
			dy:=abs(12-y);
			int := dx*dx + dy*dy;
			int:=int/7;
			i:=sqrt(int);
			i:=i+5;
			zp1[x]:=64/i;

			j:=atan2(40,x,24,y*2);

			zp2[x]:=j/5;

		end;
		inczp(zp1,80);
		inczp(zp2,80);
	end;

end;




procedure Render();
begin

	zp1:=@c1pos;
	zp2:=@l1pos;
	zp:=$0800;

	Memory::zpLo := $F800;  
	Memory::zpHi := $0001; // 32 bit addressing through pointers
	
	for y:=0 to 25 do begin
		for x:=0 to 80 do 
		begin
			i:=zp1[x]+time+zp2[x];
			j:=perlin[i]+add;
			zp[x]:=j;
			j:=j+16*5;
			Memory::Poke24(x,j);
		end;
		zp:=zp+80;
		Memory::zpLo:=Memory::zpLo+80;
		zp1:=zp1+80;
		zp2:=zp2+80;
	end;


end;



procedure SetupTables();
begin
	for i:=0 to 0 do begin
		k:=peek(#perlin,i);
		k:=k/16;
		poke(#perlin,i,k);
	end;

end;

interrupt Raster();
begin
	startirq(0);
	
	closeirq();
end;


begin
	// Set 2 mhz mode
	// Enable $4K-$8K
	Screen::SetFastMode();
	Screen::Init();
	Screen::EnableVIC4();
	InitSid(sidfile_1_init);
//	poke(^$d030,0,1);	
//	setcharsetlocation($1800);
//	vic_data_loc:=10;

	Screen::SetCharsetAddress($9000,0);
	PreCalculate();
	SetupTables();

//	startrasterchain(Raster(),0,0);

	// Copy charset data from ram to VDC ($2000)
	// Move to x=20, y=10 at memory address $0000 on the VDC (text matrix)
	while (true) do begin
		inc(time);
		// Move to matrix ram
		add:=$40;
		Render(); // Render text
		for j:=0 to 3 do
		for i:=0 to 200 do 
		begin
			wait(200);
		end;
//		asm(";balle");		
		call(sidfile_1_play);
/*		// Move to color (attribute) ram
		MoveTo80(0,0,$08);
		add:=7; // base color = 7
		Render(); // Render color*/
	end;

	Loop();
end.
