program Pluttifer;
var  
   	index,i,j, x,y,val,ix,iy: byte = 0; 
	charset:incbin("charsets/charset.bin", "$6000");
	data1: incbin("data/perlin16.dat");

	map_pos_x : byte=0;
	map_pos_y : byte=0;
	cur_pos_x, cur_pos_y, cur_val: byte;

	rands: array[256] of byte;

	pp, pu:pointer;


@define mappos $9000

@define screenPtr $4400
@define screenLo $44

@define mapSizeX 128
@define mapSizeY 128
@define mapStartX 6
@define mapStartY 2


procedure CalculateMap();
begin
	pp:=data1;
	
	for i:=0 to cur_pos_y do inczp(pp, 64);


	cur_val:=pp[cur_pos_x]+64;


/*	ix := cur_pos_x/4 + cur_pos_y/4*16;
	cur_val:=pp[ix]/2;
	i := cur_pos_x + cur_pos_y*16 + 11;
	cur_val:=cur_val + pp[i]/4;

	ix := cur_pos_x/2 + cur_pos_y/4*8 + 13;
	cur_val:=cur_val + pp[ix]/4;


	cur_val:=cur_val + 64;
*/	
end;

procedure DrawMap();
begin
	moveto(@mapStartX,@mapStartY,@screenLo);
	cur_pos_x:=map_pos_x;
	cur_pos_y:=map_pos_y;

	pp:=data1;
//	cur_pos_y:=cur_pos_y;
//	for i:=0 to cur_pos_y do inczp(pp, 64);
//	inczp(pp, cur_pos_x);
//	cur_val:=pp[cur_pos_x]+64;

	for y:=0 to @mapSizeY do begin
		for x:=0 to @mapSizeX do begin
			//CalculateMap();
			cur_val:=pp[x];
			//inc(cur_pos_x);
			screenmemory[x]:=cur_val +64;
		end;
		//inc(cur_pos_y);
		//cur_pos_x:=cur_pos_x - @mapSizeX;
		inczp(pp,16);
		inczp(screenmemory,40);
	end;

end;


procedure InitRand();
begin
	for i:=0 to 0 do begin
		rand(0,16,val);
		rands[i]:=val;	
	end;

end;


begin
	setbank(VIC_BANK1);
	SCREEN_BG_COL:=BLUE;
	SCREEN_FG_COL:=BLACK;
	VIC_DATA_LOC := $18;

	InitRand();

//	set
	clearscreen($20,@screenPtr);
	pp:=data1;
	for i:=0 to 0 do pp[i]:=pp[i]/16;
	/*for i:=0 to 64 do begin
		for j:=0 to 64 do pp[j]:=pp[j]/16;
		inczp(pp,64);
	end;
*/

	while (1=1) do begin

		DrawMap();
		joystick();
		if (joystickright=1) then inc(map_pos_x);	
		if (joystickleft=1) then dec(map_pos_x);	
		if (joystickdown=1) then inc(map_pos_y);	
		if (joystickup=1) then dec(map_pos_y);	
	
	end;
end.
