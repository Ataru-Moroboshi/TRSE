program MainProgram;
/*

	Vic 20 32K Cartridge compatible Vic Bitmap Mode template
	- Builds to PRG and CART images

	-------------------
	
	Dev Note:	Zero Page addresses have been defined in project settings
				for the Vic 20 build.
				
				_memoryzp 	- all zero page variables and resources
				_constants	- game constants & parameters
				_memory		- all main RAM variables
				_lookup		- read only look up tables
*/
var  

//@define DEBUG		1				// uncomment to show debugging timings
@define BUILDCRT		1			// uncomment to build for cartridge
//@define EXPORTBIN		1			// uncomment to export cartridge images

@ifdef EXPORTBIN

	// as separate 8k blocks
	@exportprg2bin "main.prg" "2000.prg" $2000 $4000	
	@exportprg2bin "main.prg" "4000.prg" $4000 $6000	
	@exportprg2bin "main.prg" "6000.prg" $6000 $8000	
	@exportprg2bin "main.prg" "a000.prg" $a000 $c000

@endif

@ifdef BUILDCRT
	
	// These project settings are needed to run as a cartridge build
	@projectsettings "ignorebasicsysstart" 1
	@projectsettings "basicsysaddress" $1200
	@projectsettings "startaddress" $2000

@endif	


@ifndef BUILDCRT

	// These project settings are needed to run when not a cartridge build
	@projectsettings "ignorebasicsysstart" 0
	@projectsettings "basicsysaddress" $1200
	@projectsettings "startaddress" $2000

@endif

// -------------------------------------------------------------------------------

@include "_constants.ras"			// GAME PARAMETERS and CONSTANTS
@include "_memoryzp.ras"			// variables in Zero Page and binary data


// -------------------------------------------------------------------------------
// The magic bytes needed at address $A000

@donotremove cartAutostart
@startblock $A000 "CARTAUTOSTART"
@ifdef BUILDCRT
procedure cartAutostart();
begin
	asm("
	dc.b <CRTStart,>CRTStart				; Cart reset start address
	dc.b <restoreKeyStart,>restoreKeyStart 	; Restore keypress jump address
	dc.b $41,$30,$c3,$c2,$cd				; Signature for cart autostart (a0CBM)
	"); 
end;
@endif
@endblock

// -------------------------------------------------------------------------------
// look up data
@include "_memory.ras"				// variables in main RAM
@include "_lookup.ras"				// read only lookup tables


// -------------------------------------------------------------------------------
// source files						// add your include files here

@include "vbl.ras"					// vertical blank interrupt





// -------------------------------------------------------------------------------
// **** MAIN PROGRAM ****

begin

@ifdef BUILDCRT

	// Initialize system when run as cartridge
	asm("
		jmp PRGstart		; resolves problem with joystick to start prg builds here

CRTStart:					; crt builds start here

		; Disable interrupts
		sei
     	cld                 ; clear decimal mode
     	
     	ldx #$FB			; value for start stack
     	txs					; set stack pointer
     	
		; Run kernal setup routines.
		jsr $FD8D			; initialise and test RAM
PRGstart:		
		jsr $FD52			; restore default I/O vectors
		jsr $FDF9			; initialize I/O registers 
restoreKeyStart:
		; Disable interrupts again (for Restore-key)
		sei
		jsr $E518			; initialise hardware
		
     	cli					; enable interrupts
     
     	jsr $E45B			; initialise BASIC vector tables
     	jsr $E3A4			; initialise BASIC RAM locations     
     	jsr $C644			; perform NEW (bypass check)

		; Prevent lower/uppercase swap
		lda #$80
		sta $0291		

	");
	
@endif

	Vbl_Init(); // call before set display mode
	
	vbmSetDisplayMode( 0 );
	vbmclear( 0 );
	vbmClearColor( GREEN );	

	AUX_COLOR_AND_VOLUME := %00000010;
	SCREEN_BG_COLOR := BLACK + SCREEN_BG_BLACK;

	vbmDrawText( strTitle, font8, 2, 40, 8 );
	vbmDrawSmallTextO( strDesc, font4, 4, 50, 6 );

	// main game loop
	while (true) offpage do 
	begin
		
		@ifdef DEBUG	// for testing speed
		SCREEN_BG_COLOR := BLACK + SCREEN_BG_BLACK;
		@endif
		
		// wait for vertical blank
		while (ticks = oldticks) do begin end;
		oldticks := ticks;

		@ifdef DEBUG	// for testing speed
		SCREEN_BG_COLOR := CYAN + SCREEN_BG_BLACK;
		@endif
				
	end;

end.
